ptc_enforce6d, flag=true;
!
! This example:
! - matches quadrupole strengths in a chicane
! - shows how to extract higher order map coefficients to user table
! - shows how to link it to twiss table so later it can be plotted
!  
! Piotr Skowronski (CERN) 2006
!

dsel :=1.2;!length of starting and ending drift
dmid1l:=1.5;!length of middle drift
dmid2l:=1.6;!length of middle drift
ql   :=0.2;!length of quads


qfstr := 6.695198761;!strength of quads
qdstr :=-6.712879942;!strength of quads
qf3str := 0.1;!strength of quads

lbend:=2.0;

sedft: drift, L:=dsel;
middft1: drift, L:=dmid1l;
middft2: drift, L:=dmid2l;

angb:= pi/6.;


bend1: RBEND, L=lbend, ANGLE:=-angb,  ptcrbend=true;             ! Deflection to the left
qf1: quadrupole, l=ql, k1:=qfstr;
qd:  quadrupole, l=ql, k1:=qdstr;
qf2: quadrupole, l=ql, k1:=qfstr;
bend2: RBEND, L=lbend, ANGLE=angb,   ptcrbend=true;              ! Deflection to the right
theend: marker;

chicane: line=(sedft,bend1,middft1,qf1,middft2,qd,middft2,qf2,middft1,bend2,sedft,theend);

beam, PARTICLE=ELECTRON, ENERGY=0.11d0, SIGT=1, SIGE=0.001;
use, period=chicane;


select, flag=twiss, column=name, s, beta11, alfa11, beta13, re56;

bx_ini = 10;
by_ini = 2;
ax_ini =  4;
ay_ini =  0;

match, use_macro;
  vary, name=qfstr, step=0.01;
  vary, name=qdstr, step=0.01;

  vary, name=bx_ini, step=0.1, lower=1;
  vary, name=by_ini, step=0.1, lower=1;

  vary, name=ax_ini, step=0.1;
  vary, name=ay_ini, step=0.1;
  
  m1: macro=
   {

      ptc_create_universe;
      ptc_create_layout, model=1, method=6, nst=10, exact=true, closed_layout=false;
      ptc_setswitch, debuglevel=0, exact_mis=true, time=true, totalpath=false;

      ptc_twiss, rmatrix, table=twiss, icase=56, no=2, betx=bx_ini, alfx=ax_ini,  bety=by_ini, alfy=ay_ini, betz=10., alfz=0.0;

      value, table(twiss,qf1,beta11);
      value, table(twiss,qf1,beta22); 
      value, table(twiss,theend,beta11);
      value, table(twiss,theend,beta22);
      value, table(twiss,theend,disp1), table(twiss,theend,disp2);

      value, qfstr,qdstr, bx_ini,by_ini;

      ptc_end;
      
   };


   constraint, weight=1e3, expr=table(twiss,qf1,beta11)   <200.0;
   constraint, weight=1e3, expr=table(twiss,qf1,beta22)   <200.0; 
   
   constraint, weight=1e3, expr=table(twiss,theend,disp1) = 0.0;
   constraint, weight=1e3, expr=table(twiss,theend,disp2) = 0.0;
   
   constraint, weight=1e1, expr=table(twiss,theend,beta11) < 100.0;
   constraint, weight=1e1, expr=table(twiss,theend,beta22) < 100.0;

   constraint, weight=1e1, expr=table(twiss,theend,beta11) = bx_ini;
   constraint, weight=1e1, expr=table(twiss,theend,beta22) = by_ini;

   constraint, weight=1e1, expr=table(twiss,theend,alfa11) = -ax_ini;
   constraint, weight=1e1, expr=table(twiss,theend,alfa22) = -ay_ini;

!   constraint, weight=10, expr=table(twiss,theend,beta11) = 20.0;
   
   lmdif,  tolerance=1e-30 ,calls=50;
   simplex,  tolerance=1e-30 ,calls=100;
   lmdif,  tolerance=1e-30 ,calls=50;
endmatch;


plot, noversion=true, vaxis1=beta11,beta22, haxis=s, colour=100,
    title="Matched beta functions";

plot, noversion=true, vaxis1=alfa11,alfa22, haxis=s, colour=100,
    title="Matched beta functions";

plot, noversion=true, vaxis=disp1, haxis=s, colour=100,
    title="Matched dispersion order";

write, table=twiss, file="twiss.tbl";

stop;







