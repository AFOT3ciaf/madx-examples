!---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|----8
!-------------------------------------------------------------------------------
!
!           Specifications of field imperfections for LHC v6.-2
!                   -----------------------------------
!-------------------------------------------------------------------------------
!-------------------------------HISTORY-----------------------------------------
! 06/03/96/AFG-JPK 17:15 created following the strategy defined by AP/MA W.G.
! 08/03/96/jpk     14:30 MQX(T) random distribution cut at 2 sigmas (3 before)
!                        Uncertainties now added quadratically
!                        ON_BDOT treated like a scaling factor
!                        SET_ERR_MAX: set worst case for each multipole
! 11/03/96/jpk     12:10 Fix a bug with drawing the systematic per arc:
!                        No statist. consequence but the random gen. slips
!                        Improve clarity (selection ranges, names of subroutines)
!                        Suppress redundancies in the calculation of the sigmas
!                        of the random components.
! 14/04/96/jpk     13:45 Bug corrected in setting the seed for randoms; before that
!                        time, all octants had the same suite of randoms.
! 13/08/96/jpk     09:40 Improve the control output of set_err_max
! 06/06/96/jm            Converted from v4.3 to v5.0 (THIN Lens)
! 06/06/97/jm            Updated to v5.0 (THIN Lens)
! 16/10/98/jm            Updated to V6.-2 (THIN Lens)
! 23/02/99/ew,jpk  11;30 Change to "radius=Rr" in SetEfcomp_B & SetEfcomp_Q
! 28/08/01/ew            Addition of routine for inverted MQXA and MQXB 
!                        Single_MQXA_inv and Single_MQXB_inv.
!------------------------------ENDHISTORY---------------------------------------
!
!1/ SET ALL IMPERFECTIONS FOR ALL MAGNETS:
!---------------
! ON_ALL                     ! select all magnets and all multipolar orders
!
!2/ SET A SELECTION OF IMPERF. FOR A SELECTION OF MAGNETS:
!---------------
!   The selection is carried out thru switches described later.
! <select a class of magnets, e.g. MB's>
!    Set, ON_MB, 1;
! <select the imperfections: normal, skew, order for this class>
!    Set, ON_B1s, 1;         ! normal (B) systematic (s) order 1
!       etc....
!
! <select another class of magnets, e.g. MQ's>
! Set, ON_MQ, 1;
! <select the imperfections for the MQ's>
!    Set, ON_B1s, 0;
!       etc....
!
!3/ SET ALL IMPERFECTIONS FOR A SELECTION OF MAGNETS
!---------------------------------------------------
! <select a class of magnets, e.g. MB's>
!    Set, ON_MB, 1;
! ON_MULT                    ! select all imperfection orders
!
!--------------------------------SWITCHES----------------------------------------
!SELECTION OF A CLASS OF ELEMENTS (on=1/off=0, default value)
! *Main and Disp. Suppr. Dipoles (MB)                                   : ON_MB
! *Separator: single channel RHIC dipoles (MBX, MBRS)                   : ON_MBXR
! *Separator: 2-1 RHIC dipoles (MBR)                                    : ON_MBR
! *Separator: single channel (MBXW) and 2-1  warm Dipoles (MBW)         : ON_MBW
!
! *Arc (MQ) and DS Quadrupoles (MQML, MQM, MQMC)                        : ON_MQ
! *Insertion 2-1 Quadrupoles (MQ, MQML, MQM, MQMC)                      : ON_MQIP
! *Arc Tune shift (MQT), DS (MQT) and DS trim Quads(MQTL)               : ON_MQTL
! *Single apertureRF/Quadrupoles(MQR, MQRL)                             : ON_MQR
! *Low-Beta Quadupoles (MQX, MQXL)                                      : ON_MQX
! *Wide Aperture Quadrupoles (MQY)                                      : ON_MQY
! *Warm Quadrupoles (MQW)                                               : ON_MQW
!
!SELECTION OF IMPERFECTION ORDERS (i=1..11)
! *normal systematic                                                    : ON_BiS
! *normal random                                                        : ON_BiR
! *skew systematic                                                      : ON_AiS
! *skew random                                                          : ON_AiR
!
!SELECTION OF RAMP INDUCED IMPERFECTIONS                                : ON_BDOT
!
!SUBROUTINES FOR FAST SELECTIONS
! *ALL multipole orders  set to 1                                       : ON_MULT
! *ALL multipole orders for ALL elements  set to 1                      : ON_ALL
!
!---------------------STRATEGY FOR SETTING ERRORS A LA V4.2----------------------
!
! Random and systematic imperfections are defined for each production line
! of magnets.
! Production lines defined:
!  - MB's  : 8 lines, one per arc
!  - MQ's  : 8 lines, one per arc
!  - all others: 1 line per kind of magnet
!
! Each line is defined by systematic (mean) and random (spread) imperfections:
! - RANDOM imperfections: The spread  is assumed the same for all production
!   lines of a given kind of magnets. For each magnet, an imperfection is
!   drawn from a gaussian distribution with sigma= Bir(Air),
!   cut a GCUTR sigma (3 by default). Bir(Air) is formed by quadratic addition of
!   persistent current (pc), geometric (g) and ramp induced (t) contributions
!   the latter depending on the switch ON_BDOT.
! - SYSTEMATIC imperfections: they are computed for each production line from
!   the MEAN value for the OUTER channel and the UNCERTAINTY found in the table.
!   The UNCERTAIN part is computed by adding quadratically the uncertainties for
!   pc, g, t; the value obtained is considered to be 1.5 sigmas of a gaussian
!   distribution cut at 1.5 sigmas; the uncertainty is drawn from this
!   distribution for each line.
!   The MEAN part is computed by adding linearly the pc, g, t components for
!   the OUTER channel. For the INNER channel the GEOMETRIC MEAN component is
!   deduced from that of the outer channel; it follows the following sign rules:
!      * dipoles:  -  b2, b4        (2-1 design)
!                  -  other b(2n)   (assumption; no consequence)
!                  +  b(2n+1)       (design)
!                  +  a(2n)         (wild assumption; no consequence)
!                  -  a(2n+1)       (wild assumption; no consequence)
!      * quads     +  b(2[2n+1])    (design)
!                  +  b(4n), a(2n+1)(wild assumption; no consequence)
!                  -  b(2n+1), a(2n)(wild assumption; no consequence)
!   The other MEAN components (PERSISTENT CURRENT, RAMP) keep the sign of the
!   tables for both channels.
!---------------------STRATEGY FOR THE WORST CASE------------------------------
! For each component (pc, g, t), the uncertainty and 3 rms (2 for MQX) of the
! bias due to randoms are
! added to the mean in such  a way as to produce the largest number in
! absolute value with the sign of the dominant component.
! The contributions of the three components are then added linearly
! THE SIGN RULE IS APPLIED to the mean b2 in the dipoles which is the only one
! to change sign for sure.
!------------------------------------------------------------------------------
ON_MULT: macro = {
 ON_A1s =  1 ; ON_A1r =  1 ; ON_B1s =  1 ; ON_B1r =  1;
 ON_A2s =  1 ; ON_A2r =  1 ; ON_B2s =  1 ; ON_B2r =  1;
 ON_A3s =  1 ; ON_A3r =  1 ; ON_B3s =  1 ; ON_B3r =  1;
 ON_A4s =  1 ; ON_A4r =  1 ; ON_B4s =  1 ; ON_B4r =  1;
 ON_A5s =  1 ; ON_A5r =  1 ; ON_B5s =  1 ; ON_B5r =  1;
 ON_A6s =  1 ; ON_A6r =  1 ; ON_B6s =  1 ; ON_B6r =  1;
 ON_A7s =  1 ; ON_A7r =  1 ; ON_B7s =  1 ; ON_B7r =  1;
 ON_A8s =  1 ; ON_A8r =  1 ; ON_B8s =  1 ; ON_B8r =  1;
 ON_A9s =  1 ; ON_A9r =  1 ; ON_B9s =  1 ; ON_B9r =  1;
 ON_A10s =  1; ON_A10r =  1; ON_B10s =  1; ON_B10r =  1;
 ON_A11s =  1; ON_A11r =  1; ON_B11s =  1; ON_B11r =  1;
}

ON_ALL : macro = {
 exec ON_MULT;
 ON_MB =  1 ; ON_MBXR =  1 ; ON_MBR =  1 ; ON_MBW =  1;
 ON_MQ =  1 ; ON_MQIP =  1 ; ON_MQTL = 1 ; ON_MQR =  1;
 ON_MQX = 1 ; ON_MQY =   1 ; ON_MQW =  1 ;
}

SetEfcomp_B: macro = {
   Efcomp,  radius = Rr, order= 0, 
	dknr:={1E-4*(B1s  *ON_B1S  + B1r  *ON_B1R  * TGAUSS(GCUTR)),
	1E-4*(B2s  *ON_B2S  + B2r  *ON_B2R  * TGAUSS(GCUTR)),
	1E-4*(B3s  *ON_B3S  + B3r  *ON_B3R  * TGAUSS(GCUTR)),
	1E-4*(B4s  *ON_B4S  + B4r  *ON_B4R  * TGAUSS(GCUTR)),
	1E-4*(B5s  *ON_B5S  + B5r  *ON_B5R  * TGAUSS(GCUTR)),
	1E-4*(B6s  *ON_B6S  + B6r  *ON_B6R  * TGAUSS(GCUTR)),
	1E-4*(B7s  *ON_B7S  + B7r  *ON_B7R  * TGAUSS(GCUTR)),
	1E-4*(B8s  *ON_B8S  + B8r  *ON_B8R  * TGAUSS(GCUTR)),
	1E-4*(B9s  *ON_B9S  + B9r  *ON_B9R  * TGAUSS(GCUTR)),
	1E-4*(B10s *ON_B10S + B10r *ON_B10R * TGAUSS(GCUTR)),
	1E-4*(B11s *ON_B11S + B11r *ON_B11R * TGAUSS(GCUTR))},
	dksr:={1E-4*(A1s  *ON_A1S  + A1r  *ON_A1R  * TGAUSS(GCUTR)),
	1E-4*(A2s  *ON_A2S  + A2r  *ON_A2R  * TGAUSS(GCUTR)),
	1E-4*(A3s  *ON_A3S  + A3r  *ON_A3R  * TGAUSS(GCUTR)),
	1E-4*(A4s  *ON_A4S  + A4r  *ON_A4R  * TGAUSS(GCUTR)),
	1E-4*(A5s  *ON_A5S  + A5r  *ON_A5R  * TGAUSS(GCUTR)),
	1E-4*(A6s  *ON_A6S  + A6r  *ON_A6R  * TGAUSS(GCUTR)),
	1E-4*(A7s  *ON_A7S  + A7r  *ON_A7R  * TGAUSS(GCUTR)),
	1E-4*(A8s  *ON_A8S  + A8r  *ON_A8R  * TGAUSS(GCUTR)),
	1E-4*(A9s  *ON_A9S  + A9r  *ON_A9R  * TGAUSS(GCUTR)),
	1E-4*(A10s *ON_A10S + A10r *ON_A10R * TGAUSS(GCUTR)),
	1E-4*(A11s *ON_A11S + A11r *ON_A11R * TGAUSS(GCUTR))};
}

SetEfcomp_Qinv: macro = {

   Efcomp,  radius = Rr, order= 1, 
	dknr:={0,
	1E-4*(B2s  *ON_B2S  + B2r  *ON_B2R  * TGAUSS(GCUTR)),
	-1E-4*(B3s  *ON_B3S  + B3r  *ON_B3R  * TGAUSS(GCUTR)),
	1E-4*(B4s  *ON_B4S  + B4r  *ON_B4R  * TGAUSS(GCUTR)),
	-1E-4*(B5s  *ON_B5S  + B5r  *ON_B5R  * TGAUSS(GCUTR)),
	1E-4*(B6s  *ON_B6S  + B6r  *ON_B6R  * TGAUSS(GCUTR)),
	-1E-4*(B7s  *ON_B7S  + B7r  *ON_B7R  * TGAUSS(GCUTR)),
	1E-4*(B8s  *ON_B8S  + B8r  *ON_B8R  * TGAUSS(GCUTR)),
	-1E-4*(B9s  *ON_B9S  + B9r  *ON_B9R  * TGAUSS(GCUTR)),
	1E-4*(B10s *ON_B10S + B10r *ON_B10R * TGAUSS(GCUTR)),
	-1E-4*(B11s *ON_B11S + B11r *ON_B11R * TGAUSS(GCUTR))},
	dksr:={0,
	-1E-4*(A2s  *ON_A2S  + A2r  *ON_A2R  * TGAUSS(GCUTR)),
	1E-4*(A3s  *ON_A3S  + A3r  *ON_A3R  * TGAUSS(GCUTR)),
	-1E-4*(A4s  *ON_A4S  + A4r  *ON_A4R  * TGAUSS(GCUTR)),
	1E-4*(A5s  *ON_A5S  + A5r  *ON_A5R  * TGAUSS(GCUTR)),
	-1E-4*(A6s  *ON_A6S  + A6r  *ON_A6R  * TGAUSS(GCUTR)),
	1E-4*(A7s  *ON_A7S  + A7r  *ON_A7R  * TGAUSS(GCUTR)),
	-1E-4*(A8s  *ON_A8S  + A8r  *ON_A8R  * TGAUSS(GCUTR)),
	1E-4*(A9s  *ON_A9S  + A9r  *ON_A9R  * TGAUSS(GCUTR)),
	-1E-4*(A10s *ON_A10S + A10r *ON_A10R * TGAUSS(GCUTR)),
	1E-4*(A11s *ON_A11S + A11r *ON_A11R * TGAUSS(GCUTR))};
}

SetEfcomp_Q: macro = {

   Efcomp,  radius = Rr, order= 1, 
	dknr:={0,
	1E-4*(B2s  *ON_B2S  + B2r  *ON_B2R  * TGAUSS(GCUTR)),
	1E-4*(B3s  *ON_B3S  + B3r  *ON_B3R  * TGAUSS(GCUTR)),
	1E-4*(B4s  *ON_B4S  + B4r  *ON_B4R  * TGAUSS(GCUTR)),
	1E-4*(B5s  *ON_B5S  + B5r  *ON_B5R  * TGAUSS(GCUTR)),
	1E-4*(B6s  *ON_B6S  + B6r  *ON_B6R  * TGAUSS(GCUTR)),
	1E-4*(B7s  *ON_B7S  + B7r  *ON_B7R  * TGAUSS(GCUTR)),
	1E-4*(B8s  *ON_B8S  + B8r  *ON_B8R  * TGAUSS(GCUTR)),
	1E-4*(B9s  *ON_B9S  + B9r  *ON_B9R  * TGAUSS(GCUTR)),
	1E-4*(B10s *ON_B10S + B10r *ON_B10R * TGAUSS(GCUTR)),
	1E-4*(B11s *ON_B11S + B11r *ON_B11R * TGAUSS(GCUTR))},
	dksr:={0,
	1E-4*(A2s  *ON_A2S  + A2r  *ON_A2R  * TGAUSS(GCUTR)),
	1E-4*(A3s  *ON_A3S  + A3r  *ON_A3R  * TGAUSS(GCUTR)),
	1E-4*(A4s  *ON_A4S  + A4r  *ON_A4R  * TGAUSS(GCUTR)),
	1E-4*(A5s  *ON_A5S  + A5r  *ON_A5R  * TGAUSS(GCUTR)),
	1E-4*(A6s  *ON_A6S  + A6r  *ON_A6R  * TGAUSS(GCUTR)),
	1E-4*(A7s  *ON_A7S  + A7r  *ON_A7R  * TGAUSS(GCUTR)),
	1E-4*(A8s  *ON_A8S  + A8r  *ON_A8R  * TGAUSS(GCUTR)),
	1E-4*(A9s  *ON_A9S  + A9r  *ON_A9R  * TGAUSS(GCUTR)),
	1E-4*(A10s *ON_A10S + A10r *ON_A10R * TGAUSS(GCUTR)),
	1E-4*(A11s *ON_A11S + A11r *ON_A11R * TGAUSS(GCUTR))};
}

!****************Main and Disp. Suppr. Dipoles (MB)*******************

NewFamily_MB: macro = {
 b1ss  = sqrt(b1pU_MB^2 + b1gU_MB^2 + (b1tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 a1ss  = sqrt(a1pU_MB^2 + a1gU_MB^2 + (a1tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 b2ss  = sqrt(b2pU_MB^2 + b2gU_MB^2 + (b2tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 a2ss  = sqrt(a2pU_MB^2 + a2gU_MB^2 + (a2tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 b3ss  = sqrt(b3pU_MB^2 + b3gU_MB^2 + (b3tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 a3ss  = sqrt(a3pU_MB^2 + a3gU_MB^2 + (a3tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 b4ss  = sqrt(b4pU_MB^2 + b4gU_MB^2 + (b4tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 a4ss  = sqrt(a4pU_MB^2 + a4gU_MB^2 + (a4tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 b5ss  = sqrt(b5pU_MB^2 + b5gU_MB^2 + (b5tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 a5ss  = sqrt(a5pU_MB^2 + a5gU_MB^2 + (a5tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 b6ss  = sqrt(b6pU_MB^2 + b6gU_MB^2 + (b6tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 a6ss  = sqrt(a6pU_MB^2 + a6gU_MB^2 + (a6tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 b7ss  = sqrt(b7pU_MB^2 + b7gU_MB^2 + (b7tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 a7ss  = sqrt(a7pU_MB^2 + a7gU_MB^2 + (a7tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 b8ss  = sqrt(b8pU_MB^2 + b8gU_MB^2 + (b8tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 a8ss  = sqrt(a8pU_MB^2 + a8gU_MB^2 + (a8tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 b9ss  = sqrt(b9pU_MB^2 + b9gU_MB^2 + (b9tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 a9ss  = sqrt(a9pU_MB^2 + a9gU_MB^2 + (a9tU_MB * ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 b10ss = sqrt(b10pU_MB^2+ b10gU_MB^2+ (b10tU_MB* ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 a10ss = sqrt(a10pU_MB^2+ a10gU_MB^2+ (a10tU_MB* ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 b11ss = sqrt(b11pU_MB^2+ b11gU_MB^2+ (b11tU_MB* ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
 a11ss = sqrt(a11pU_MB^2+ a11gU_MB^2+ (a11tU_MB* ON_BDOT)^2 ) 
                                   /GCUTS*TGAUSS(GCUTS);
}

Outer_MB: macro = {
 B1s   =  ON_MB*( b1pM_MB  + b1gM_MB  + b1tM_MB  * ON_BDOT  + b1ss );
 B2s   =  ON_MB*( b2pM_MB  + b2gM_MB  + b2tM_MB  * ON_BDOT  + b2ss );
 B3s   =  ON_MB*( b3pM_MB  + b3gM_MB  + b3tM_MB  * ON_BDOT  + b3ss );
 B4s   =  ON_MB*( b4pM_MB  + b4gM_MB  + b4tM_MB  * ON_BDOT  + b4ss );
 B5s   =  ON_MB*( b5pM_MB  + b5gM_MB  + b5tM_MB  * ON_BDOT  + b5ss );
 B6s   =  ON_MB*( b6pM_MB  + b6gM_MB  + b6tM_MB  * ON_BDOT  + b6ss );
 B7s   =  ON_MB*( b7pM_MB  + b7gM_MB  + b7tM_MB  * ON_BDOT  + b7ss );
 B8s   =  ON_MB*( b8pM_MB  + b8gM_MB  + b8tM_MB  * ON_BDOT  + b8ss );
 B9s   =  ON_MB*( b9pM_MB  + b9gM_MB  + b9tM_MB  * ON_BDOT  + b9ss );
 B10s  =  ON_MB*( b10pM_MB + b10gM_MB + b10tM_MB * ON_BDOT  + b10ss);
 B11s  =  ON_MB*( b11pM_MB + b11gM_MB + b11tM_MB * ON_BDOT  + b11ss);

 A1s   =  ON_MB*( a1pM_MB  + a1gM_MB  + a1tM_MB  * ON_BDOT  + a1ss );
 A2s   =  ON_MB*( a2pM_MB  + a2gM_MB  + a2tM_MB  * ON_BDOT  + a2ss );
 A3s   =  ON_MB*( a3pM_MB  + a3gM_MB  + a3tM_MB  * ON_BDOT  + a3ss );
 A4s   =  ON_MB*( a4pM_MB  + a4gM_MB  + a4tM_MB  * ON_BDOT  + a4ss );
 A5s   =  ON_MB*( a5pM_MB  + a5gM_MB  + a5tM_MB  * ON_BDOT  + a5ss );
 A6s   =  ON_MB*( a6pM_MB  + a6gM_MB  + a6tM_MB  * ON_BDOT  + a6ss );
 A7s   =  ON_MB*( a7pM_MB  + a7gM_MB  + a7tM_MB  * ON_BDOT  + a7ss );
 A8s   =  ON_MB*( a8pM_MB  + a8gM_MB  + a8tM_MB  * ON_BDOT  + a8ss );
 A9s   =  ON_MB*( a9pM_MB  + a9gM_MB  + a9tM_MB  * ON_BDOT  + a9ss );
 A10s  =  ON_MB*( a10pM_MB + a10gM_MB + a10tM_MB * ON_BDOT  + a10ss);
 A11s  =  ON_MB*( a11pM_MB + a11gM_MB + a11tM_MB * ON_BDOT  + a11ss);
}

Inner_MB: macro = {
 B1s   =  ON_MB*( b1pM_MB  + b1gM_MB  + b1tM_MB  * ON_BDOT  + b1ss );
 B2s   =  ON_MB*( b2pM_MB  - b2gM_MB  + b2tM_MB  * ON_BDOT  + b2ss );
 B3s   =  ON_MB*( b3pM_MB  + b3gM_MB  + b3tM_MB  * ON_BDOT  + b3ss );
 B4s   =  ON_MB*( b4pM_MB  - b4gM_MB  + b4tM_MB  * ON_BDOT  + b4ss );
 B5s   =  ON_MB*( b5pM_MB  + b5gM_MB  + b5tM_MB  * ON_BDOT  + b5ss );
 B6s   =  ON_MB*( b6pM_MB  - b6gM_MB  + b6tM_MB  * ON_BDOT  + b6ss );
 B7s   =  ON_MB*( b7pM_MB  + b7gM_MB  + b7tM_MB  * ON_BDOT  + b7ss );
 B8s   =  ON_MB*( b8pM_MB  - b8gM_MB  + b8tM_MB  * ON_BDOT  + b8ss );
 B9s   =  ON_MB*( b9pM_MB  + b9gM_MB  + b9tM_MB  * ON_BDOT  + b9ss );
 B10s  =  ON_MB*( b10pM_MB - b10gM_MB + b10tM_MB * ON_BDOT  + b10ss);
 B11s  =  ON_MB*( b11pM_MB + b11gM_MB + b11tM_MB * ON_BDOT  + b11ss);

 A1s   =  ON_MB*( a1pM_MB  - a1gM_MB  + a1tM_MB  * ON_BDOT  + a1ss) ;
 A2s   =  ON_MB*( a2pM_MB  + a2gM_MB  + a2tM_MB  * ON_BDOT  + a2ss );
 A3s   =  ON_MB*( a3pM_MB  - a3gM_MB  + a3tM_MB  * ON_BDOT  + a3ss );
 A4s   =  ON_MB*( a4pM_MB  + a4gM_MB  + a4tM_MB  * ON_BDOT  + a4ss );
 A5s   =  ON_MB*( a5pM_MB  - a5gM_MB  + a5tM_MB  * ON_BDOT  + a5ss );
 A6s   =  ON_MB*( a6pM_MB  + a6gM_MB  + a6tM_MB  * ON_BDOT  + a6ss );
 A7s   =  ON_MB*( a7pM_MB  - a7gM_MB  + a7tM_MB  * ON_BDOT  + a7ss );
 A8s   =  ON_MB*( a8pM_MB  + a8gM_MB  + a8tM_MB  * ON_BDOT  + a8ss );
 A9s   =  ON_MB*( a9pM_MB  - a9gM_MB  + a9tM_MB  * ON_BDOT  + a9ss );
 A10s  =  ON_MB*( a10pM_MB + a10gM_MB + a10tM_MB * ON_BDOT  + a10ss);
 A11s  =  ON_MB*( a11pM_MB - a11gM_MB + a11tM_MB * ON_BDOT  + a11ss);
}

!***********Separator: RHIC single channel Dipoles (MBX)**************

NewFamily_MBX: macro = {

 b1ss  = sqrt(b1pU_MBXR^2 + b1gU_MBXR^2 + (b1tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a1ss  = sqrt(a1pU_MBXR^2 + a1gU_MBXR^2 + (a1tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b2ss  = sqrt(b2pU_MBXR^2 + b2gU_MBXR^2 + (b2tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a2ss  = sqrt(a2pU_MBXR^2 + a2gU_MBXR^2 + (a2tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b3ss  = sqrt(b3pU_MBXR^2 + b3gU_MBXR^2 + (b3tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a3ss  = sqrt(a3pU_MBXR^2 + a3gU_MBXR^2 + (a3tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b4ss  = sqrt(b4pU_MBXR^2 + b4gU_MBXR^2 + (b4tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a4ss  = sqrt(a4pU_MBXR^2 + a4gU_MBXR^2 + (a4tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b5ss  = sqrt(b5pU_MBXR^2 + b5gU_MBXR^2 + (b5tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a5ss  = sqrt(a5pU_MBXR^2 + a5gU_MBXR^2 + (a5tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b6ss  = sqrt(b6pU_MBXR^2 + b6gU_MBXR^2 + (b6tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a6ss  = sqrt(a6pU_MBXR^2 + a6gU_MBXR^2 + (a6tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b7ss  = sqrt(b7pU_MBXR^2 + b7gU_MBXR^2 + (b7tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a7ss  = sqrt(a7pU_MBXR^2 + a7gU_MBXR^2 + (a7tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b8ss  = sqrt(b8pU_MBXR^2 + b8gU_MBXR^2 + (b8tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a8ss  = sqrt(a8pU_MBXR^2 + a8gU_MBXR^2 + (a8tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b9ss  = sqrt(b9pU_MBXR^2 + b9gU_MBXR^2 + (b9tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a9ss  = sqrt(a9pU_MBXR^2 + a9gU_MBXR^2 + (a9tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b10ss = sqrt(b10pU_MBXR^2+ b10gU_MBXR^2+ (b10tU_MBXR* ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a10ss = sqrt(a10pU_MBXR^2+ a10gU_MBXR^2+ (a10tU_MBXR* ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b11ss = sqrt(b11pU_MBXR^2+ b11gU_MBXR^2+ (b11tU_MBXR* ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a11ss = sqrt(a11pU_MBXR^2+ a11gU_MBXR^2+ (a11tU_MBXR* ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
}

Single_MBX: macro = {
 B1s  =  ON_MBXR*( b1pM_MBXR  + b1gM_MBXR  + b1tM_MBXR  * ON_BDOT + b1ss );
 B2s  =  ON_MBXR*( b2pM_MBXR  + b2gM_MBXR  + b2tM_MBXR  * ON_BDOT + b2ss );
 B3s  =  ON_MBXR*( b3pM_MBXR  + b3gM_MBXR  + b3tM_MBXR  * ON_BDOT + b3ss );
 B4s  =  ON_MBXR*( b4pM_MBXR  + b4gM_MBXR  + b4tM_MBXR  * ON_BDOT + b4ss );
 B5s  =  ON_MBXR*( b5pM_MBXR  + b5gM_MBXR  + b5tM_MBXR  * ON_BDOT + b5ss );
 B6s  =  ON_MBXR*( b6pM_MBXR  + b6gM_MBXR  + b6tM_MBXR  * ON_BDOT + b6ss );
 B7s  =  ON_MBXR*( b7pM_MBXR  + b7gM_MBXR  + b7tM_MBXR  * ON_BDOT + b7ss );
 B8s  =  ON_MBXR*( b8pM_MBXR  + b8gM_MBXR  + b8tM_MBXR  * ON_BDOT + b8ss );
 B9s  =  ON_MBXR*( b9pM_MBXR  + b9gM_MBXR  + b9tM_MBXR  * ON_BDOT + b9ss );
 B10s =  ON_MBXR*( b10pM_MBXR + b10gM_MBXR + b10tM_MBXR * ON_BDOT + b10ss);
 B11s =  ON_MBXR*( b11pM_MBXR + b11gM_MBXR + b11tM_MBXR * ON_BDOT + b11ss);

 A1s  =  ON_MBXR*( a1pM_MBXR  + a1gM_MBXR  + a1tM_MBXR  * ON_BDOT + a1ss );
 A2s  =  ON_MBXR*( a2pM_MBXR  + a2gM_MBXR  + a2tM_MBXR  * ON_BDOT + a2ss );
 A3s  =  ON_MBXR*( a3pM_MBXR  + a3gM_MBXR  + a3tM_MBXR  * ON_BDOT + a3ss );
 A4s  =  ON_MBXR*( a4pM_MBXR  + a4gM_MBXR  + a4tM_MBXR  * ON_BDOT + a4ss );
 A5s  =  ON_MBXR*( a5pM_MBXR  + a5gM_MBXR  + a5tM_MBXR  * ON_BDOT + a5ss );
 A6s  =  ON_MBXR*( a6pM_MBXR  + a6gM_MBXR  + a6tM_MBXR  * ON_BDOT + a6ss );
 A7s  =  ON_MBXR*( a7pM_MBXR  + a7gM_MBXR  + a7tM_MBXR  * ON_BDOT + a7ss );
 A8s  =  ON_MBXR*( a8pM_MBXR  + a8gM_MBXR  + a8tM_MBXR  * ON_BDOT + a8ss );
 A9s  =  ON_MBXR*( a9pM_MBXR  + a9gM_MBXR  + a9tM_MBXR  * ON_BDOT + a9ss );
 A10s =  ON_MBXR*( a10pM_MBXR + a10gM_MBXR + a10tM_MBXR * ON_BDOT + a10ss);
 A11s =  ON_MBXR*( a11pM_MBXR + a11gM_MBXR + a11tM_MBXR * ON_BDOT + a11ss);
}

!*********Separator: RHIC 2 x single channel Dipoles (MBRS)***********

NewFamily_MBRS: macro = {
 b1ss  = sqrt(b1pU_MBXR^2 + b1gU_MBXR^2 + (b1tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a1ss  = sqrt(a1pU_MBXR^2 + a1gU_MBXR^2 + (a1tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b2ss  = sqrt(b2pU_MBXR^2 + b2gU_MBXR^2 + (b2tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a2ss  = sqrt(a2pU_MBXR^2 + a2gU_MBXR^2 + (a2tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b3ss  = sqrt(b3pU_MBXR^2 + b3gU_MBXR^2 + (b3tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a3ss  = sqrt(a3pU_MBXR^2 + a3gU_MBXR^2 + (a3tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b4ss  = sqrt(b4pU_MBXR^2 + b4gU_MBXR^2 + (b4tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a4ss  = sqrt(a4pU_MBXR^2 + a4gU_MBXR^2 + (a4tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b5ss  = sqrt(b5pU_MBXR^2 + b5gU_MBXR^2 + (b5tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a5ss  = sqrt(a5pU_MBXR^2 + a5gU_MBXR^2 + (a5tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b6ss  = sqrt(b6pU_MBXR^2 + b6gU_MBXR^2 + (b6tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a6ss  = sqrt(a6pU_MBXR^2 + a6gU_MBXR^2 + (a6tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b7ss  = sqrt(b7pU_MBXR^2 + b7gU_MBXR^2 + (b7tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a7ss  = sqrt(a7pU_MBXR^2 + a7gU_MBXR^2 + (a7tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b8ss  = sqrt(b8pU_MBXR^2 + b8gU_MBXR^2 + (b8tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a8ss  = sqrt(a8pU_MBXR^2 + a8gU_MBXR^2 + (a8tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b9ss  = sqrt(b9pU_MBXR^2 + b9gU_MBXR^2 + (b9tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a9ss  = sqrt(a9pU_MBXR^2 + a9gU_MBXR^2 + (a9tU_MBXR * ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b10ss = sqrt(b10pU_MBXR^2+ b10gU_MBXR^2+ (b10tU_MBXR* ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a10ss = sqrt(a10pU_MBXR^2+ a10gU_MBXR^2+ (a10tU_MBXR* ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 b11ss = sqrt(b11pU_MBXR^2+ b11gU_MBXR^2+ (b11tU_MBXR* ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
 a11ss = sqrt(a11pU_MBXR^2+ a11gU_MBXR^2+ (a11tU_MBXR* ON_BDOT)^2 ) 
                            /GCUTS*TGAUSS(GCUTS);
}

Single_MBRS: macro = {
 B1s  =  ON_MBXR*( b1pM_MBXR  + b1gM_MBXR  + b1tM_MBXR  * ON_BDOT + b1ss );
 B2s  =  ON_MBXR*( b2pM_MBXR  + b2gM_MBXR  + b2tM_MBXR  * ON_BDOT + b2ss );
 B3s  =  ON_MBXR*( b3pM_MBXR  + b3gM_MBXR  + b3tM_MBXR  * ON_BDOT + b3ss );
 B4s  =  ON_MBXR*( b4pM_MBXR  + b4gM_MBXR  + b4tM_MBXR  * ON_BDOT + b4ss );
 B5s  =  ON_MBXR*( b5pM_MBXR  + b5gM_MBXR  + b5tM_MBXR  * ON_BDOT + b5ss );
 B6s  =  ON_MBXR*( b6pM_MBXR  + b6gM_MBXR  + b6tM_MBXR  * ON_BDOT + b6ss );
 B7s  =  ON_MBXR*( b7pM_MBXR  + b7gM_MBXR  + b7tM_MBXR  * ON_BDOT + b7ss );
 B8s  =  ON_MBXR*( b8pM_MBXR  + b8gM_MBXR  + b8tM_MBXR  * ON_BDOT + b8ss );
 B9s  =  ON_MBXR*( b9pM_MBXR  + b9gM_MBXR  + b9tM_MBXR  * ON_BDOT + b9ss );
 B10s =  ON_MBXR*( b10pM_MBXR + b10gM_MBXR + b10tM_MBXR * ON_BDOT + b10ss);
 B11s =  ON_MBXR*( b11pM_MBXR + b11gM_MBXR + b11tM_MBXR * ON_BDOT + b11ss);

 A1s  =  ON_MBXR*( a1pM_MBXR  + a1gM_MBXR  + a1tM_MBXR  * ON_BDOT + a1ss );
 A2s  =  ON_MBXR*( a2pM_MBXR  + a2gM_MBXR  + a2tM_MBXR  * ON_BDOT + a2ss );
 A3s  =  ON_MBXR*( a3pM_MBXR  + a3gM_MBXR  + a3tM_MBXR  * ON_BDOT + a3ss );
 A4s  =  ON_MBXR*( a4pM_MBXR  + a4gM_MBXR  + a4tM_MBXR  * ON_BDOT + a4ss );
 A5s  =  ON_MBXR*( a5pM_MBXR  + a5gM_MBXR  + a5tM_MBXR  * ON_BDOT + a5ss );
 A6s  =  ON_MBXR*( a6pM_MBXR  + a6gM_MBXR  + a6tM_MBXR  * ON_BDOT + a6ss );
 A7s  =  ON_MBXR*( a7pM_MBXR  + a7gM_MBXR  + a7tM_MBXR  * ON_BDOT + a7ss );
 A8s  =  ON_MBXR*( a8pM_MBXR  + a8gM_MBXR  + a8tM_MBXR  * ON_BDOT + a8ss );
 A9s  =  ON_MBXR*( a9pM_MBXR  + a9gM_MBXR  + a9tM_MBXR  * ON_BDOT + a9ss );
 A10s =  ON_MBXR*( a10pM_MBXR + a10gM_MBXR + a10tM_MBXR * ON_BDOT + a10ss);
 A11s =  ON_MBXR*( a11pM_MBXR + a11gM_MBXR + a11tM_MBXR * ON_BDOT + a11ss);
}

!******************Separator: RHIC 2-1 Dipoles (MBR)******************

NewFamily_MBR: macro = {
 b1ss  = sqrt(b1pU_MBR^2 + b1gU_MBR^2 + (b1tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a1ss  = sqrt(a1pU_MBR^2 + a1gU_MBR^2 + (a1tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b2ss  = sqrt(b2pU_MBR^2 + b2gU_MBR^2 + (b2tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a2ss  = sqrt(a2pU_MBR^2 + a2gU_MBR^2 + (a2tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b3ss  = sqrt(b3pU_MBR^2 + b3gU_MBR^2 + (b3tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a3ss  = sqrt(a3pU_MBR^2 + a3gU_MBR^2 + (a3tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b4ss  = sqrt(b4pU_MBR^2 + b4gU_MBR^2 + (b4tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a4ss  = sqrt(a4pU_MBR^2 + a4gU_MBR^2 + (a4tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b5ss  = sqrt(b5pU_MBR^2 + b5gU_MBR^2 + (b5tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a5ss  = sqrt(a5pU_MBR^2 + a5gU_MBR^2 + (a5tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b6ss  = sqrt(b6pU_MBR^2 + b6gU_MBR^2 + (b6tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a6ss  = sqrt(a6pU_MBR^2 + a6gU_MBR^2 + (a6tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b7ss  = sqrt(b7pU_MBR^2 + b7gU_MBR^2 + (b7tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a7ss  = sqrt(a7pU_MBR^2 + a7gU_MBR^2 + (a7tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b8ss  = sqrt(b8pU_MBR^2 + b8gU_MBR^2 + (b8tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a8ss  = sqrt(a8pU_MBR^2 + a8gU_MBR^2 + (a8tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b9ss  = sqrt(b9pU_MBR^2 + b9gU_MBR^2 + (b9tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a9ss  = sqrt(a9pU_MBR^2 + a9gU_MBR^2 + (a9tU_MBR * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b10ss = sqrt(b10pU_MBR^2+ b10gU_MBR^2+ (b10tU_MBR* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a10ss = sqrt(a10pU_MBR^2+ a10gU_MBR^2+ (a10tU_MBR* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b11ss = sqrt(b11pU_MBR^2+ b11gU_MBR^2+ (b11tU_MBR* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a11ss = sqrt(a11pU_MBR^2+ a11gU_MBR^2+ (a11tU_MBR* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
}

Outer_MBR: macro = {
 B1s  =  ON_MBR*( b1pM_MBR  + b1gM_MBR  + b1tM_MBR  * ON_BDOT + b1ss );
 B2s  =  ON_MBR*( b2pM_MBR  + b2gM_MBR  + b2tM_MBR  * ON_BDOT + b2ss );
 B3s  =  ON_MBR*( b3pM_MBR  + b3gM_MBR  + b3tM_MBR  * ON_BDOT + b3ss );
 B4s  =  ON_MBR*( b4pM_MBR  + b4gM_MBR  + b4tM_MBR  * ON_BDOT + b4ss );
 B5s  =  ON_MBR*( b5pM_MBR  + b5gM_MBR  + b5tM_MBR  * ON_BDOT + b5ss );
 B6s  =  ON_MBR*( b6pM_MBR  + b6gM_MBR  + b6tM_MBR  * ON_BDOT + b6ss );
 B7s  =  ON_MBR*( b7pM_MBR  + b7gM_MBR  + b7tM_MBR  * ON_BDOT + b7ss );
 B8s  =  ON_MBR*( b8pM_MBR  + b8gM_MBR  + b8tM_MBR  * ON_BDOT + b8ss );
 B9s  =  ON_MBR*( b9pM_MBR  + b9gM_MBR  + b9tM_MBR  * ON_BDOT + b9ss );
 B10s =  ON_MBR*( b10pM_MBR + b10gM_MBR + b10tM_MBR * ON_BDOT + b10ss);
 B11s =  ON_MBR*( b11pM_MBR + b11gM_MBR + b11tM_MBR * ON_BDOT + b11ss);

 A1s  =  ON_MBR*( a1pM_MBR  + a1gM_MBR  + a1tM_MBR  * ON_BDOT + a1ss );
 A2s  =  ON_MBR*( a2pM_MBR  + a2gM_MBR  + a2tM_MBR  * ON_BDOT + a2ss );
 A3s  =  ON_MBR*( a3pM_MBR  + a3gM_MBR  + a3tM_MBR  * ON_BDOT + a3ss );
 A4s  =  ON_MBR*( a4pM_MBR  + a4gM_MBR  + a4tM_MBR  * ON_BDOT + a4ss );
 A5s  =  ON_MBR*( a5pM_MBR  + a5gM_MBR  + a5tM_MBR  * ON_BDOT + a5ss );
 A6s  =  ON_MBR*( a6pM_MBR  + a6gM_MBR  + a6tM_MBR  * ON_BDOT + a6ss );
 A7s  =  ON_MBR*( a7pM_MBR  + a7gM_MBR  + a7tM_MBR  * ON_BDOT + a7ss );
 A8s  =  ON_MBR*( a8pM_MBR  + a8gM_MBR  + a8tM_MBR  * ON_BDOT + a8ss );
 A9s  =  ON_MBR*( a9pM_MBR  + a9gM_MBR  + a9tM_MBR  * ON_BDOT + a9ss );
 A10s =  ON_MBR*( a10pM_MBR + a10gM_MBR + a10tM_MBR * ON_BDOT + a10ss);
 A11s =  ON_MBR*( a11pM_MBR + a11gM_MBR + a11tM_MBR * ON_BDOT + a11ss);
}

Inner_MBR: macro = {
 B1s  =  ON_MBR*( b1pM_MBR  + b1gM_MBR  + b1tM_MBR  * ON_BDOT + b1ss );
 B2s  =  ON_MBR*( b2pM_MBR  - b2gM_MBR  + b2tM_MBR  * ON_BDOT + b2ss );
 B3s  =  ON_MBR*( b3pM_MBR  + b3gM_MBR  + b3tM_MBR  * ON_BDOT + b3ss );
 B4s  =  ON_MBR*( b4pM_MBR  - b4gM_MBR  + b4tM_MBR  * ON_BDOT + b4ss );
 B5s  =  ON_MBR*( b5pM_MBR  + b5gM_MBR  + b5tM_MBR  * ON_BDOT + b5ss );
 B6s  =  ON_MBR*( b6pM_MBR  - b6gM_MBR  + b6tM_MBR  * ON_BDOT + b6ss );
 B7s  =  ON_MBR*( b7pM_MBR  + b7gM_MBR  + b7tM_MBR  * ON_BDOT + b7ss );
 B8s  =  ON_MBR*( b8pM_MBR  - b8gM_MBR  + b8tM_MBR  * ON_BDOT + b8ss );
 B9s  =  ON_MBR*( b9pM_MBR  + b9gM_MBR  + b9tM_MBR  * ON_BDOT + b9ss );
 B10s =  ON_MBR*( b10pM_MBR - b10gM_MBR + b10tM_MBR * ON_BDOT + b10ss);
 B11s =  ON_MBR*( b11pM_MBR + b11gM_MBR + b11tM_MBR * ON_BDOT + b11ss);

 A1s  =  ON_MBR*( a1pM_MBR  - a1gM_MBR  + a1tM_MBR  * ON_BDOT + a1ss );
 A2s  =  ON_MBR*( a2pM_MBR  + a2gM_MBR  + a2tM_MBR  * ON_BDOT + a2ss );
 A3s  =  ON_MBR*( a3pM_MBR  - a3gM_MBR  + a3tM_MBR  * ON_BDOT + a3ss );
 A4s  =  ON_MBR*( a4pM_MBR  + a4gM_MBR  + a4tM_MBR  * ON_BDOT + a4ss );
 A5s  =  ON_MBR*( a5pM_MBR  - a5gM_MBR  + a5tM_MBR  * ON_BDOT + a5ss );
 A6s  =  ON_MBR*( a6pM_MBR  + a6gM_MBR  + a6tM_MBR  * ON_BDOT + a6ss );
 A7s  =  ON_MBR*( a7pM_MBR  - a7gM_MBR  + a7tM_MBR  * ON_BDOT + a7ss );
 A8s  =  ON_MBR*( a8pM_MBR  + a8gM_MBR  + a8tM_MBR  * ON_BDOT + a8ss );
 A9s  =  ON_MBR*( a9pM_MBR  - a9gM_MBR  + a9tM_MBR  * ON_BDOT + a9ss );
 A10s =  ON_MBR*( a10pM_MBR + a10gM_MBR + a10tM_MBR * ON_BDOT + a10ss);
 A11s =  ON_MBR*( a11pM_MBR - a11gM_MBR + a11tM_MBR * ON_BDOT + a11ss);
}


!************Separator: single channel warm Dipoles (MBXW)************
!*****************Separator: 2-1  warm Dipoles (MBW)******************

NewFamily_MBW: macro = {
 b1ss  = sqrt(b1pU_MBW^2 + b1gU_MBW^2 + (b1tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 a1ss  = sqrt(a1pU_MBW^2 + a1gU_MBW^2 + (a1tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 b2ss  = sqrt(b2pU_MBW^2 + b2gU_MBW^2 + (b2tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 a2ss  = sqrt(a2pU_MBW^2 + a2gU_MBW^2 + (a2tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 b3ss  = sqrt(b3pU_MBW^2 + b3gU_MBW^2 + (b3tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 a3ss  = sqrt(a3pU_MBW^2 + a3gU_MBW^2 + (a3tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 b4ss  = sqrt(b4pU_MBW^2 + b4gU_MBW^2 + (b4tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 a4ss  = sqrt(a4pU_MBW^2 + a4gU_MBW^2 + (a4tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 b5ss  = sqrt(b5pU_MBW^2 + b5gU_MBW^2 + (b5tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 a5ss  = sqrt(a5pU_MBW^2 + a5gU_MBW^2 + (a5tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 b6ss  = sqrt(b6pU_MBW^2 + b6gU_MBW^2 + (b6tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 a6ss  = sqrt(a6pU_MBW^2 + a6gU_MBW^2 + (a6tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 b7ss  = sqrt(b7pU_MBW^2 + b7gU_MBW^2 + (b7tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 a7ss  = sqrt(a7pU_MBW^2 + a7gU_MBW^2 + (a7tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 b8ss  = sqrt(b8pU_MBW^2 + b8gU_MBW^2 + (b8tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 a8ss  = sqrt(a8pU_MBW^2 + a8gU_MBW^2 + (a8tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 b9ss  = sqrt(b9pU_MBW^2 + b9gU_MBW^2 + (b9tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 a9ss  = sqrt(a9pU_MBW^2 + a9gU_MBW^2 + (a9tU_MBW * ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 b10ss = sqrt(b10pU_MBW^2+ b10gU_MBW^2+ (b10tU_MBW* ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 a10ss = sqrt(a10pU_MBW^2+ a10gU_MBW^2+ (a10tU_MBW* ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 b11ss = sqrt(b11pU_MBW^2+ b11gU_MBW^2+ (b11tU_MBW* ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
 a11ss = sqrt(a11pU_MBW^2+ a11gU_MBW^2+ (a11tU_MBW* ON_BDOT)^2 ) 
                             /GCUTS*TGAUSS(GCUTS);
}

Single_MBW: macro = {
 B1s   =  ON_MBW*( b1pM_MBW  + b1gM_MBW  + b1tM_MBW  * ON_BDOT  + b1ss );
 B2s   =  ON_MBW*( b2pM_MBW  + b2gM_MBW  + b2tM_MBW  * ON_BDOT  + b2ss );
 B3s   =  ON_MBW*( b3pM_MBW  + b3gM_MBW  + b3tM_MBW  * ON_BDOT  + b3ss );
 B4s   =  ON_MBW*( b4pM_MBW  + b4gM_MBW  + b4tM_MBW  * ON_BDOT  + b4ss );
 B5s   =  ON_MBW*( b5pM_MBW  + b5gM_MBW  + b5tM_MBW  * ON_BDOT  + b5ss );
 B6s   =  ON_MBW*( b6pM_MBW  + b6gM_MBW  + b6tM_MBW  * ON_BDOT  + b6ss );
 B7s   =  ON_MBW*( b7pM_MBW  + b7gM_MBW  + b7tM_MBW  * ON_BDOT  + b7ss );
 B8s   =  ON_MBW*( b8pM_MBW  + b8gM_MBW  + b8tM_MBW  * ON_BDOT  + b8ss );
 B9s   =  ON_MBW*( b9pM_MBW  + b9gM_MBW  + b9tM_MBW  * ON_BDOT  + b9ss );
 B10s  =  ON_MBW*( b10pM_MBW + b10gM_MBW + b10tM_MBW * ON_BDOT  + b10ss);
 B11s  =  ON_MBW*( b11pM_MBW + b11gM_MBW + b11tM_MBW * ON_BDOT  + b11ss);

 A1s   =  ON_MBW*( a1pM_MBW  + a1gM_MBW  + a1tM_MBW  * ON_BDOT  + a1ss );
 A2s   =  ON_MBW*( a2pM_MBW  + a2gM_MBW  + a2tM_MBW  * ON_BDOT  + a2ss );
 A3s   =  ON_MBW*( a3pM_MBW  + a3gM_MBW  + a3tM_MBW  * ON_BDOT  + a3ss );
 A4s   =  ON_MBW*( a4pM_MBW  + a4gM_MBW  + a4tM_MBW  * ON_BDOT  + a4ss );
 A5s   =  ON_MBW*( a5pM_MBW  + a5gM_MBW  + a5tM_MBW  * ON_BDOT  + a5ss );
 A6s   =  ON_MBW*( a6pM_MBW  + a6gM_MBW  + a6tM_MBW  * ON_BDOT  + a6ss );
 A7s   =  ON_MBW*( a7pM_MBW  + a7gM_MBW  + a7tM_MBW  * ON_BDOT  + a7ss );
 A8s   =  ON_MBW*( a8pM_MBW  + a8gM_MBW  + a8tM_MBW  * ON_BDOT  + a8ss );
 A9s   =  ON_MBW*( a9pM_MBW  + a9gM_MBW  + a9tM_MBW  * ON_BDOT  + a9ss );
 A10s  =  ON_MBW*( a10pM_MBW + a10gM_MBW + a10tM_MBW * ON_BDOT  + a10ss);
 A11s  =  ON_MBW*( a11pM_MBW + a11gM_MBW + a11tM_MBW * ON_BDOT  + a11ss);
}

Outer_MBW: macro = {
 B1s   =  ON_MBW*( b1pM_MBW  + b1gM_MBW  + b1tM_MBW  * ON_BDOT  + b1ss );
 B2s   =  ON_MBW*( b2pM_MBW  + b2gM_MBW  + b2tM_MBW  * ON_BDOT  + b2ss );
 B3s   =  ON_MBW*( b3pM_MBW  + b3gM_MBW  + b3tM_MBW  * ON_BDOT  + b3ss );
 B4s   =  ON_MBW*( b4pM_MBW  + b4gM_MBW  + b4tM_MBW  * ON_BDOT  + b4ss );
 B5s   =  ON_MBW*( b5pM_MBW  + b5gM_MBW  + b5tM_MBW  * ON_BDOT  + b5ss );
 B6s   =  ON_MBW*( b6pM_MBW  + b6gM_MBW  + b6tM_MBW  * ON_BDOT  + b6ss );
 B7s   =  ON_MBW*( b7pM_MBW  + b7gM_MBW  + b7tM_MBW  * ON_BDOT  + b7ss );
 B8s   =  ON_MBW*( b8pM_MBW  + b8gM_MBW  + b8tM_MBW  * ON_BDOT  + b8ss );
 B9s   =  ON_MBW*( b9pM_MBW  + b9gM_MBW  + b9tM_MBW  * ON_BDOT  + b9ss );
 B10s  =  ON_MBW*( b10pM_MBW + b10gM_MBW + b10tM_MBW * ON_BDOT  + b10ss);
 B11s  =  ON_MBW*( b11pM_MBW + b11gM_MBW + b11tM_MBW * ON_BDOT  + b11ss);

 A1s   =  ON_MBW*( a1pM_MBW  + a1gM_MBW  + a1tM_MBW  * ON_BDOT  + a1ss );
 A2s   =  ON_MBW*( a2pM_MBW  + a2gM_MBW  + a2tM_MBW  * ON_BDOT  + a2ss );
 A3s   =  ON_MBW*( a3pM_MBW  + a3gM_MBW  + a3tM_MBW  * ON_BDOT  + a3ss );
 A4s   =  ON_MBW*( a4pM_MBW  + a4gM_MBW  + a4tM_MBW  * ON_BDOT  + a4ss );
 A5s   =  ON_MBW*( a5pM_MBW  + a5gM_MBW  + a5tM_MBW  * ON_BDOT  + a5ss );
 A6s   =  ON_MBW*( a6pM_MBW  + a6gM_MBW  + a6tM_MBW  * ON_BDOT  + a6ss );
 A7s   =  ON_MBW*( a7pM_MBW  + a7gM_MBW  + a7tM_MBW  * ON_BDOT  + a7ss );
 A8s   =  ON_MBW*( a8pM_MBW  + a8gM_MBW  + a8tM_MBW  * ON_BDOT  + a8ss );
 A9s   =  ON_MBW*( a9pM_MBW  + a9gM_MBW  + a9tM_MBW  * ON_BDOT  + a9ss );
 A10s  =  ON_MBW*( a10pM_MBW + a10gM_MBW + a10tM_MBW * ON_BDOT  + a10ss);
 A11s  =  ON_MBW*( a11pM_MBW + a11gM_MBW + a11tM_MBW * ON_BDOT  + a11ss);
}

Inner_MBW: macro = {
 B1s   =  ON_MBW*( b1pM_MBW  + b1gM_MBW  + b1tM_MBW  * ON_BDOT  + b1ss );
 B2s   =  ON_MBW*( b2pM_MBW  - b2gM_MBW  + b2tM_MBW  * ON_BDOT  + b2ss );
 B3s   =  ON_MBW*( b3pM_MBW  + b3gM_MBW  + b3tM_MBW  * ON_BDOT  + b3ss );
 B4s   =  ON_MBW*( b4pM_MBW  - b4gM_MBW  + b4tM_MBW  * ON_BDOT  + b4ss );
 B5s   =  ON_MBW*( b5pM_MBW  + b5gM_MBW  + b5tM_MBW  * ON_BDOT  + b5ss );
 B6s   =  ON_MBW*( b6pM_MBW  - b6gM_MBW  + b6tM_MBW  * ON_BDOT  + b6ss );
 B7s   =  ON_MBW*( b7pM_MBW  + b7gM_MBW  + b7tM_MBW  * ON_BDOT  + b7ss );
 B8s   =  ON_MBW*( b8pM_MBW  - b8gM_MBW  + b8tM_MBW  * ON_BDOT  + b8ss );
 B9s   =  ON_MBW*( b9pM_MBW  + b9gM_MBW  + b9tM_MBW  * ON_BDOT  + b9ss );
 B10s  =  ON_MBW*( b10pM_MBW - b10gM_MBW + b10tM_MBW * ON_BDOT  + b10ss);
 B11s  =  ON_MBW*( b11pM_MBW + b11gM_MBW + b11tM_MBW * ON_BDOT  + b11ss);

 A1s   =  ON_MBW*( a1pM_MBW  - a1gM_MBW  + a1tM_MBW  * ON_BDOT  + a1ss );
 A2s   =  ON_MBW*( a2pM_MBW  + a2gM_MBW  + a2tM_MBW  * ON_BDOT  + a2ss );
 A3s   =  ON_MBW*( a3pM_MBW  - a3gM_MBW  + a3tM_MBW  * ON_BDOT  + a3ss );
 A4s   =  ON_MBW*( a4pM_MBW  + a4gM_MBW  + a4tM_MBW  * ON_BDOT  + a4ss );
 A5s   =  ON_MBW*( a5pM_MBW  - a5gM_MBW  + a5tM_MBW  * ON_BDOT  + a5ss );
 A6s   =  ON_MBW*( a6pM_MBW  + a6gM_MBW  + a6tM_MBW  * ON_BDOT  + a6ss );
 A7s   =  ON_MBW*( a7pM_MBW  - a7gM_MBW  + a7tM_MBW  * ON_BDOT  + a7ss );
 A8s   =  ON_MBW*( a8pM_MBW  + a8gM_MBW  + a8tM_MBW  * ON_BDOT  + a8ss );
 A9s   =  ON_MBW*( a9pM_MBW  - a9gM_MBW  + a9tM_MBW  * ON_BDOT  + a9ss );
 A10s  =  ON_MBW*( a10pM_MBW + a10gM_MBW + a10tM_MBW * ON_BDOT  + a10ss);
 A11s  =  ON_MBW*( a11pM_MBW - a11gM_MBW + a11tM_MBW * ON_BDOT  + a11ss);
}

!*****************************Arc Quadrupoles(MQ)*********************
!*************************Disp. Suppr. Quadrupoles(MQ)****************
!*********************Insertion Quadrupoles(MQ)(via ON_MQIP)**********
!*********************Disp. Supppr. trim Quadrupoles(MQTL)************

NewFamily_MQ: macro = {
 b2ss  = sqrt(b2pU_MQ^2 + b2gU_MQ^2 + (b2tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a2ss  = sqrt(a2pU_MQ^2 + a2gU_MQ^2 + (a2tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b3ss  = sqrt(b3pU_MQ^2 + b3gU_MQ^2 + (b3tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a3ss  = sqrt(a3pU_MQ^2 + a3gU_MQ^2 + (a3tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b4ss  = sqrt(b4pU_MQ^2 + b4gU_MQ^2 + (b4tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a4ss  = sqrt(a4pU_MQ^2 + a4gU_MQ^2 + (a4tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b5ss  = sqrt(b5pU_MQ^2 + b5gU_MQ^2 + (b5tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a5ss  = sqrt(a5pU_MQ^2 + a5gU_MQ^2 + (a5tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b6ss  = sqrt(b6pU_MQ^2 + b6gU_MQ^2 + (b6tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a6ss  = sqrt(a6pU_MQ^2 + a6gU_MQ^2 + (a6tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b7ss  = sqrt(b7pU_MQ^2 + b7gU_MQ^2 + (b7tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a7ss  = sqrt(a7pU_MQ^2 + a7gU_MQ^2 + (a7tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b8ss  = sqrt(b8pU_MQ^2 + b8gU_MQ^2 + (b8tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a8ss  = sqrt(a8pU_MQ^2 + a8gU_MQ^2 + (a8tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b9ss  = sqrt(b9pU_MQ^2 + b9gU_MQ^2 + (b9tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a9ss  = sqrt(a9pU_MQ^2 + a9gU_MQ^2 + (a9tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b10ss = sqrt(b10pU_MQ^2+ b10gU_MQ^2+ (b10tU_MQ* ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a10ss = sqrt(a10pU_MQ^2+ a10gU_MQ^2+ (a10tU_MQ* ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b11ss = sqrt(b11pU_MQ^2+ b11gU_MQ^2+ (b11tU_MQ* ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a11ss = sqrt(a11pU_MQ^2+ a11gU_MQ^2+ (a11tU_MQ* ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
}

Outer_MQ: macro = {
 B2s   =  ON_MQ *( b2pM_MQ  + b2gM_MQ  + b2tM_MQ  * ON_BDOT  + b2ss );
 B3s   =  ON_MQ *( b3pM_MQ  + b3gM_MQ  + b3tM_MQ  * ON_BDOT  + b3ss );
 B4s   =  ON_MQ *( b4pM_MQ  + b4gM_MQ  + b4tM_MQ  * ON_BDOT  + b4ss );
 B5s   =  ON_MQ *( b5pM_MQ  + b5gM_MQ  + b5tM_MQ  * ON_BDOT  + b5ss );
 B6s   =  ON_MQ *( b6pM_MQ  + b6gM_MQ  + b6tM_MQ  * ON_BDOT  + b6ss );
 B7s   =  ON_MQ *( b7pM_MQ  + b7gM_MQ  + b7tM_MQ  * ON_BDOT  + b7ss );
 B8s   =  ON_MQ *( b8pM_MQ  + b8gM_MQ  + b8tM_MQ  * ON_BDOT  + b8ss );
 B9s   =  ON_MQ *( b9pM_MQ  + b9gM_MQ  + b9tM_MQ  * ON_BDOT  + b9ss );
 B10s  =  ON_MQ *( b10pM_MQ + b10gM_MQ + b10tM_MQ * ON_BDOT  + b10ss);
 B11s  =  ON_MQ *( b11pM_MQ + b11gM_MQ + b11tM_MQ * ON_BDOT  + b11ss);

 A2s   =  ON_MQ *( a2pM_MQ  + a2gM_MQ  + a2tM_MQ  * ON_BDOT  + a2ss );
 A3s   =  ON_MQ *( a3pM_MQ  + a3gM_MQ  + a3tM_MQ  * ON_BDOT  + a3ss );
 A4s   =  ON_MQ *( a4pM_MQ  + a4gM_MQ  + a4tM_MQ  * ON_BDOT  + a4ss );
 A5s   =  ON_MQ *( a5pM_MQ  + a5gM_MQ  + a5tM_MQ  * ON_BDOT  + a5ss );
 A6s   =  ON_MQ *( a6pM_MQ  + a6gM_MQ  + a6tM_MQ  * ON_BDOT  + a6ss );
 A7s   =  ON_MQ *( a7pM_MQ  + a7gM_MQ  + a7tM_MQ  * ON_BDOT  + a7ss );
 A8s   =  ON_MQ *( a8pM_MQ  + a8gM_MQ  + a8tM_MQ  * ON_BDOT  + a8ss );
 A9s   =  ON_MQ *( a9pM_MQ  + a9gM_MQ  + a9tM_MQ  * ON_BDOT  + a9ss );
 A10s  =  ON_MQ *( a10pM_MQ + a10gM_MQ + a10tM_MQ * ON_BDOT  + a10ss);
 A11s  =  ON_MQ *( a11pM_MQ + a11gM_MQ + a11tM_MQ * ON_BDOT  + a11ss);
}

Inner_MQ: macro = {
 B2s   =  ON_MQ *( b2pM_MQ  + b2gM_MQ  + b2tM_MQ  * ON_BDOT  + b2ss );
 B3s   =  ON_MQ *( b3pM_MQ  - b3gM_MQ  + b3tM_MQ  * ON_BDOT  + b3ss );
 B4s   =  ON_MQ *( b4pM_MQ  + b4gM_MQ  + b4tM_MQ  * ON_BDOT  + b4ss );
 B5s   =  ON_MQ *( b5pM_MQ  - b5gM_MQ  + b5tM_MQ  * ON_BDOT  + b5ss );
 B6s   =  ON_MQ *( b6pM_MQ  + b6gM_MQ  + b6tM_MQ  * ON_BDOT  + b6ss );
 B7s   =  ON_MQ *( b7pM_MQ  - b7gM_MQ  + b7tM_MQ  * ON_BDOT  + b7ss );
 B8s   =  ON_MQ *( b8pM_MQ  + b8gM_MQ  + b8tM_MQ  * ON_BDOT  + b8ss );
 B9s   =  ON_MQ *( b9pM_MQ  - b9gM_MQ  + b9tM_MQ  * ON_BDOT  + b9ss );
 B10s  =  ON_MQ *( b10pM_MQ + b10gM_MQ + b10tM_MQ * ON_BDOT  + b10ss);
 B11s  =  ON_MQ *( b11pM_MQ - b11gM_MQ + b11tM_MQ * ON_BDOT  + b11ss);

 A2s   =  ON_MQ *( a2pM_MQ  - a2gM_MQ  + a2tM_MQ  * ON_BDOT  + a2ss );
 A3s   =  ON_MQ *( a3pM_MQ  + a3gM_MQ  + a3tM_MQ  * ON_BDOT  + a3ss );
 A4s   =  ON_MQ *( a4pM_MQ  - a4gM_MQ  + a4tM_MQ  * ON_BDOT  + a4ss );
 A5s   =  ON_MQ *( a5pM_MQ  + a5gM_MQ  + a5tM_MQ  * ON_BDOT  + a5ss );
 A6s   =  ON_MQ *( a6pM_MQ  - a6gM_MQ  + a6tM_MQ  * ON_BDOT  + a6ss );
 A7s   =  ON_MQ *( a7pM_MQ  + a7gM_MQ  + a7tM_MQ  * ON_BDOT  + a7ss );
 A8s   =  ON_MQ *( a8pM_MQ  - a8gM_MQ  + a8tM_MQ  * ON_BDOT  + a8ss );
 A9s   =  ON_MQ *( a9pM_MQ  + a9gM_MQ  + a9tM_MQ  * ON_BDOT  + a9ss );
 A10s  =  ON_MQ *( a10pM_MQ - a10gM_MQ + a10tM_MQ * ON_BDOT  + a10ss);
 A11s  =  ON_MQ *( a11pM_MQ + a11gM_MQ + a11tM_MQ * ON_BDOT  + a11ss);
}

Outer_MQIP: macro = {
 B2s   =  ON_MQIP*( b2pM_MQ  + b2gM_MQ  + b2tM_MQ  * ON_BDOT  + b2ss );
 B3s   =  ON_MQIP*( b3pM_MQ  + b3gM_MQ  + b3tM_MQ  * ON_BDOT  + b3ss );
 B4s   =  ON_MQIP*( b4pM_MQ  + b4gM_MQ  + b4tM_MQ  * ON_BDOT  + b4ss );
 B5s   =  ON_MQIP*( b5pM_MQ  + b5gM_MQ  + b5tM_MQ  * ON_BDOT  + b5ss );
 B6s   =  ON_MQIP*( b6pM_MQ  + b6gM_MQ  + b6tM_MQ  * ON_BDOT  + b6ss );
 B7s   =  ON_MQIP*( b7pM_MQ  + b7gM_MQ  + b7tM_MQ  * ON_BDOT  + b7ss );
 B8s   =  ON_MQIP*( b8pM_MQ  + b8gM_MQ  + b8tM_MQ  * ON_BDOT  + b8ss );
 B9s   =  ON_MQIP*( b9pM_MQ  + b9gM_MQ  + b9tM_MQ  * ON_BDOT  + b9ss );
 B10s  =  ON_MQIP*( b10pM_MQ + b10gM_MQ + b10tM_MQ * ON_BDOT  + b10ss);
 B11s  =  ON_MQIP*( b11pM_MQ + b11gM_MQ + b11tM_MQ * ON_BDOT  + b11ss);

 A2s   =  ON_MQIP*( a2pM_MQ  + a2gM_MQ  + a2tM_MQ  * ON_BDOT  + a2ss );
 A3s   =  ON_MQIP*( a3pM_MQ  + a3gM_MQ  + a3tM_MQ  * ON_BDOT  + a3ss );
 A4s   =  ON_MQIP*( a4pM_MQ  + a4gM_MQ  + a4tM_MQ  * ON_BDOT  + a4ss );
 A5s   =  ON_MQIP*( a5pM_MQ  + a5gM_MQ  + a5tM_MQ  * ON_BDOT  + a5ss );
 A6s   =  ON_MQIP*( a6pM_MQ  + a6gM_MQ  + a6tM_MQ  * ON_BDOT  + a6ss );
 A7s   =  ON_MQIP*( a7pM_MQ  + a7gM_MQ  + a7tM_MQ  * ON_BDOT  + a7ss );
 A8s   =  ON_MQIP*( a8pM_MQ  + a8gM_MQ  + a8tM_MQ  * ON_BDOT  + a8ss );
 A9s   =  ON_MQIP*( a9pM_MQ  + a9gM_MQ  + a9tM_MQ  * ON_BDOT  + a9ss );
 A10s  =  ON_MQIP*( a10pM_MQ + a10gM_MQ + a10tM_MQ * ON_BDOT  + a10ss);
 A11s  =  ON_MQIP*( a11pM_MQ + a11gM_MQ + a11tM_MQ * ON_BDOT  + a11ss);
}

Inner_MQIP: macro = {
 B2s   =  ON_MQIP*( b2pM_MQ  + b2gM_MQ  + b2tM_MQ  * ON_BDOT  + b2ss );
 B3s   =  ON_MQIP*( b3pM_MQ  - b3gM_MQ  + b3tM_MQ  * ON_BDOT  + b3ss );
 B4s   =  ON_MQIP*( b4pM_MQ  + b4gM_MQ  + b4tM_MQ  * ON_BDOT  + b4ss );
 B5s   =  ON_MQIP*( b5pM_MQ  - b5gM_MQ  + b5tM_MQ  * ON_BDOT  + b5ss );
 B6s   =  ON_MQIP*( b6pM_MQ  + b6gM_MQ  + b6tM_MQ  * ON_BDOT  + b6ss );
 B7s   =  ON_MQIP*( b7pM_MQ  - b7gM_MQ  + b7tM_MQ  * ON_BDOT  + b7ss );
 B8s   =  ON_MQIP*( b8pM_MQ  + b8gM_MQ  + b8tM_MQ  * ON_BDOT  + b8ss );
 B9s   =  ON_MQIP*( b9pM_MQ  - b9gM_MQ  + b9tM_MQ  * ON_BDOT  + b9ss );
 B10s  =  ON_MQIP*( b10pM_MQ + b10gM_MQ + b10tM_MQ * ON_BDOT  + b10ss);
 B11s  =  ON_MQIP*( b11pM_MQ - b11gM_MQ + b11tM_MQ * ON_BDOT  + b11ss);

 A2s   =  ON_MQIP*( a2pM_MQ  - a2gM_MQ  + a2tM_MQ  * ON_BDOT  + a2ss );
 A3s   =  ON_MQIP*( a3pM_MQ  + a3gM_MQ  + a3tM_MQ  * ON_BDOT  + a3ss );
 A4s   =  ON_MQIP*( a4pM_MQ  - a4gM_MQ  + a4tM_MQ  * ON_BDOT  + a4ss );
 A5s   =  ON_MQIP*( a5pM_MQ  + a5gM_MQ  + a5tM_MQ  * ON_BDOT  + a5ss );
 A6s   =  ON_MQIP*( a6pM_MQ  - a6gM_MQ  + a6tM_MQ  * ON_BDOT  + a6ss );
 A7s   =  ON_MQIP*( a7pM_MQ  + a7gM_MQ  + a7tM_MQ  * ON_BDOT  + a7ss );
 A8s   =  ON_MQIP*( a8pM_MQ  - a8gM_MQ  + a8tM_MQ  * ON_BDOT  + a8ss );
 A9s   =  ON_MQIP*( a9pM_MQ  + a9gM_MQ  + a9tM_MQ  * ON_BDOT  + a9ss );
 A10s  =  ON_MQIP*( a10pM_MQ - a10gM_MQ + a10tM_MQ * ON_BDOT  + a10ss);
 A11s  =  ON_MQIP*( a11pM_MQ + a11gM_MQ + a11tM_MQ * ON_BDOT  + a11ss);
}

Outer_MQTL: macro = {
 B2s   = ON_MQTL*( b2pM_MQ  + b2gM_MQ  + b2tM_MQ  * ON_BDOT  + b2ss );
 B3s   = ON_MQTL*( b3pM_MQ  + b3gM_MQ  + b3tM_MQ  * ON_BDOT  + b3ss );
 B4s   = ON_MQTL*( b4pM_MQ  + b4gM_MQ  + b4tM_MQ  * ON_BDOT  + b4ss );
 B5s   = ON_MQTL*( b5pM_MQ  + b5gM_MQ  + b5tM_MQ  * ON_BDOT  + b5ss );
 B6s   = ON_MQTL*( b6pM_MQ  + b6gM_MQ  + b6tM_MQ  * ON_BDOT  + b6ss );
 B7s   = ON_MQTL*( b7pM_MQ  + b7gM_MQ  + b7tM_MQ  * ON_BDOT  + b7ss );
 B8s   = ON_MQTL*( b8pM_MQ  + b8gM_MQ  + b8tM_MQ  * ON_BDOT  + b8ss );
 B9s   = ON_MQTL*( b9pM_MQ  + b9gM_MQ  + b9tM_MQ  * ON_BDOT  + b9ss );
 B10s  = ON_MQTL*( b10pM_MQ + b10gM_MQ + b10tM_MQ * ON_BDOT  + b10ss);
 B11s  = ON_MQTL*( b11pM_MQ + b11gM_MQ + b11tM_MQ * ON_BDOT  + b11ss);

 A2s   = ON_MQTL*( a2pM_MQ  + a2gM_MQ  + a2tM_MQ  * ON_BDOT  + a2ss );
 A3s   = ON_MQTL*( a3pM_MQ  + a3gM_MQ  + a3tM_MQ  * ON_BDOT  + a3ss );
 A4s   = ON_MQTL*( a4pM_MQ  + a4gM_MQ  + a4tM_MQ  * ON_BDOT  + a4ss );
 A5s   = ON_MQTL*( a5pM_MQ  + a5gM_MQ  + a5tM_MQ  * ON_BDOT  + a5ss );
 A6s   = ON_MQTL*( a6pM_MQ  + a6gM_MQ  + a6tM_MQ  * ON_BDOT  + a6ss );
 A7s   = ON_MQTL*( a7pM_MQ  + a7gM_MQ  + a7tM_MQ  * ON_BDOT  + a7ss );
 A8s   = ON_MQTL*( a8pM_MQ  + a8gM_MQ  + a8tM_MQ  * ON_BDOT  + a8ss );
 A9s   = ON_MQTL*( a9pM_MQ  + a9gM_MQ  + a9tM_MQ  * ON_BDOT  + a9ss );
 A10s  = ON_MQTL*( a10pM_MQ + a10gM_MQ + a10tM_MQ * ON_BDOT  + a10ss);
 A11s  = ON_MQTL*( a11pM_MQ + a11gM_MQ + a11tM_MQ * ON_BDOT  + a11ss);
}

Inner_MQTL: macro = {
 B2s   = ON_MQTL*( b2pM_MQ  + b2gM_MQ  + b2tM_MQ  * ON_BDOT  + b2ss );
 B3s   = ON_MQTL*( b3pM_MQ  - b3gM_MQ  + b3tM_MQ  * ON_BDOT  + b3ss );
 B4s   = ON_MQTL*( b4pM_MQ  + b4gM_MQ  + b4tM_MQ  * ON_BDOT  + b4ss );
 B5s   = ON_MQTL*( b5pM_MQ  - b5gM_MQ  + b5tM_MQ  * ON_BDOT  + b5ss );
 B6s   = ON_MQTL*( b6pM_MQ  + b6gM_MQ  + b6tM_MQ  * ON_BDOT  + b6ss );
 B7s   = ON_MQTL*( b7pM_MQ  - b7gM_MQ  + b7tM_MQ  * ON_BDOT  + b7ss );
 B8s   = ON_MQTL*( b8pM_MQ  + b8gM_MQ  + b8tM_MQ  * ON_BDOT  + b8ss );
 B9s   = ON_MQTL*( b9pM_MQ  - b9gM_MQ  + b9tM_MQ  * ON_BDOT  + b9ss );
 B10s  = ON_MQTL*( b10pM_MQ + b10gM_MQ + b10tM_MQ * ON_BDOT  + b10ss);
 B11s  = ON_MQTL*( b11pM_MQ - b11gM_MQ + b11tM_MQ * ON_BDOT  + b11ss);

 A2s   = ON_MQTL*( a2pM_MQ  - a2gM_MQ  + a2tM_MQ  * ON_BDOT  + a2ss );
 A3s   = ON_MQTL*( a3pM_MQ  + a3gM_MQ  + a3tM_MQ  * ON_BDOT  + a3ss );
 A4s   = ON_MQTL*( a4pM_MQ  - a4gM_MQ  + a4tM_MQ  * ON_BDOT  + a4ss );
 A5s   = ON_MQTL*( a5pM_MQ  + a5gM_MQ  + a5tM_MQ  * ON_BDOT  + a5ss );
 A6s   = ON_MQTL*( a6pM_MQ  - a6gM_MQ  + a6tM_MQ  * ON_BDOT  + a6ss );
 A7s   = ON_MQTL*( a7pM_MQ  + a7gM_MQ  + a7tM_MQ  * ON_BDOT  + a7ss );
 A8s   = ON_MQTL*( a8pM_MQ  - a8gM_MQ  + a8tM_MQ  * ON_BDOT  + a8ss );
 A9s   = ON_MQTL*( a9pM_MQ  + a9gM_MQ  + a9tM_MQ  * ON_BDOT  + a9ss );
 A10s  = ON_MQTL*( a10pM_MQ - a10gM_MQ + a10tM_MQ * ON_BDOT  + a10ss);
 A11s  = ON_MQTL*( a11pM_MQ + a11gM_MQ + a11tM_MQ * ON_BDOT  + a11ss);
}

!*********************Single aperture RF/Quadrupoles(MQR)*************

NewFamily_MQR: macro = {
 b2ss  = sqrt(b2pU_MQ^2 + b2gU_MQ^2 + (b2tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a2ss  = sqrt(a2pU_MQ^2 + a2gU_MQ^2 + (a2tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b3ss  = sqrt(b3pU_MQ^2 + b3gU_MQ^2 + (b3tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a3ss  = sqrt(a3pU_MQ^2 + a3gU_MQ^2 + (a3tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b4ss  = sqrt(b4pU_MQ^2 + b4gU_MQ^2 + (b4tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a4ss  = sqrt(a4pU_MQ^2 + a4gU_MQ^2 + (a4tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b5ss  = sqrt(b5pU_MQ^2 + b5gU_MQ^2 + (b5tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a5ss  = sqrt(a5pU_MQ^2 + a5gU_MQ^2 + (a5tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b6ss  = sqrt(b6pU_MQ^2 + b6gU_MQ^2 + (b6tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a6ss  = sqrt(a6pU_MQ^2 + a6gU_MQ^2 + (a6tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b7ss  = sqrt(b7pU_MQ^2 + b7gU_MQ^2 + (b7tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a7ss  = sqrt(a7pU_MQ^2 + a7gU_MQ^2 + (a7tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b8ss  = sqrt(b8pU_MQ^2 + b8gU_MQ^2 + (b8tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a8ss  = sqrt(a8pU_MQ^2 + a8gU_MQ^2 + (a8tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b9ss  = sqrt(b9pU_MQ^2 + b9gU_MQ^2 + (b9tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a9ss  = sqrt(a9pU_MQ^2 + a9gU_MQ^2 + (a9tU_MQ * ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b10ss = sqrt(b10pU_MQ^2+ b10gU_MQ^2+ (b10tU_MQ* ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a10ss = sqrt(a10pU_MQ^2+ a10gU_MQ^2+ (a10tU_MQ* ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 b11ss = sqrt(b11pU_MQ^2+ b11gU_MQ^2+ (b11tU_MQ* ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
 a11ss = sqrt(a11pU_MQ^2+ a11gU_MQ^2+ (a11tU_MQ* ON_BDOT)^2) 
                            /GCUTS*TGAUSS(GCUTS);
}

Single_MQR: macro = {
 B2s   =  ON_MQR*( b2pM_MQ  + b2gM_MQ  + b2tM_MQ  * ON_BDOT  + b2ss );
 B3s   =  ON_MQR*( b3pM_MQ  + b3gM_MQ  + b3tM_MQ  * ON_BDOT  + b3ss );
 B4s   =  ON_MQR*( b4pM_MQ  + b4gM_MQ  + b4tM_MQ  * ON_BDOT  + b4ss );
 B5s   =  ON_MQR*( b5pM_MQ  + b5gM_MQ  + b5tM_MQ  * ON_BDOT  + b5ss );
 B6s   =  ON_MQR*( b6pM_MQ  + b6gM_MQ  + b6tM_MQ  * ON_BDOT  + b6ss );
 B7s   =  ON_MQR*( b7pM_MQ  + b7gM_MQ  + b7tM_MQ  * ON_BDOT  + b7ss );
 B8s   =  ON_MQR*( b8pM_MQ  + b8gM_MQ  + b8tM_MQ  * ON_BDOT  + b8ss );
 B9s   =  ON_MQR*( b9pM_MQ  + b9gM_MQ  + b9tM_MQ  * ON_BDOT  + b9ss );
 B10s  =  ON_MQR*( b10pM_MQ + b10gM_MQ + b10tM_MQ * ON_BDOT  + b10ss);
 B11s  =  ON_MQR*( b11pM_MQ + b11gM_MQ + b11tM_MQ * ON_BDOT  + b11ss);

 A2s   =  ON_MQR*( a2pM_MQ  + a2gM_MQ  + a2tM_MQ  * ON_BDOT  + a2ss );
 A3s   =  ON_MQR*( a3pM_MQ  + a3gM_MQ  + a3tM_MQ  * ON_BDOT  + a3ss );
 A4s   =  ON_MQR*( a4pM_MQ  + a4gM_MQ  + a4tM_MQ  * ON_BDOT  + a4ss );
 A5s   =  ON_MQR*( a5pM_MQ  + a5gM_MQ  + a5tM_MQ  * ON_BDOT  + a5ss );
 A6s   =  ON_MQR*( a6pM_MQ  + a6gM_MQ  + a6tM_MQ  * ON_BDOT  + a6ss );
 A7s   =  ON_MQR*( a7pM_MQ  + a7gM_MQ  + a7tM_MQ  * ON_BDOT  + a7ss );
 A8s   =  ON_MQR*( a8pM_MQ  + a8gM_MQ  + a8tM_MQ  * ON_BDOT  + a8ss );
 A9s   =  ON_MQR*( a9pM_MQ  + a9gM_MQ  + a9tM_MQ  * ON_BDOT  + a9ss );
 A10s  =  ON_MQR*( a10pM_MQ + a10gM_MQ + a10tM_MQ * ON_BDOT  + a10ss);
 A11s  =  ON_MQR*( a11pM_MQ + a11gM_MQ + a11tM_MQ * ON_BDOT  + a11ss);
}

!***********************Low-Beta Quadrupoles (MQX)********************
!********************Low-Beta Trim Quadrupoles (MQXT)*****************

NewFamily_MQX: macro = {
 b2ss  = sqrt(b2pU_MQX^2 + b2gU_MQX^2 + (b2tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a2ss  = sqrt(a2pU_MQX^2 + a2gU_MQX^2 + (a2tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b3ss  = sqrt(b3pU_MQX^2 + b3gU_MQX^2 + (b3tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a3ss  = sqrt(a3pU_MQX^2 + a3gU_MQX^2 + (a3tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b4ss  = sqrt(b4pU_MQX^2 + b4gU_MQX^2 + (b4tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a4ss  = sqrt(a4pU_MQX^2 + a4gU_MQX^2 + (a4tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b5ss  = sqrt(b5pU_MQX^2 + b5gU_MQX^2 + (b5tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a5ss  = sqrt(a5pU_MQX^2 + a5gU_MQX^2 + (a5tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b6ss  = sqrt(b6pU_MQX^2 + b6gU_MQX^2 + (b6tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a6ss  = sqrt(a6pU_MQX^2 + a6gU_MQX^2 + (a6tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b7ss  = sqrt(b7pU_MQX^2 + b7gU_MQX^2 + (b7tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a7ss  = sqrt(a7pU_MQX^2 + a7gU_MQX^2 + (a7tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b8ss  = sqrt(b8pU_MQX^2 + b8gU_MQX^2 + (b8tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a8ss  = sqrt(a8pU_MQX^2 + a8gU_MQX^2 + (a8tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b9ss  = sqrt(b9pU_MQX^2 + b9gU_MQX^2 + (b9tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a9ss  = sqrt(a9pU_MQX^2 + a9gU_MQX^2 + (a9tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b10ss = sqrt(b10pU_MQX^2+ b10gU_MQX^2+ (b10tU_MQX* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a10ss = sqrt(a10pU_MQX^2+ a10gU_MQX^2+ (a10tU_MQX* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b11ss = sqrt(b11pU_MQX^2+ b11gU_MQX^2+ (b11tU_MQX* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a11ss = sqrt(a11pU_MQX^2+ a11gU_MQX^2+ (a11tU_MQX* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
}

Single_MQX: macro = {
 B2s   =  ON_MQX*( b2pM_MQX  + b2gM_MQX  + b2tM_MQX  * ON_BDOT  + b2ss );
 B3s   =  ON_MQX*( b3pM_MQX  + b3gM_MQX  + b3tM_MQX  * ON_BDOT  + b3ss );
 B4s   =  ON_MQX*( b4pM_MQX  + b4gM_MQX  + b4tM_MQX  * ON_BDOT  + b4ss );
 B5s   =  ON_MQX*( b5pM_MQX  + b5gM_MQX  + b5tM_MQX  * ON_BDOT  + b5ss );
 B6s   =  ON_MQX*( b6pM_MQX  + b6gM_MQX  + b6tM_MQX  * ON_BDOT  + b6ss );
 B7s   =  ON_MQX*( b7pM_MQX  + b7gM_MQX  + b7tM_MQX  * ON_BDOT  + b7ss );
 B8s   =  ON_MQX*( b8pM_MQX  + b8gM_MQX  + b8tM_MQX  * ON_BDOT  + b8ss );
 B9s   =  ON_MQX*( b9pM_MQX  + b9gM_MQX  + b9tM_MQX  * ON_BDOT  + b9ss );
 B10s  =  ON_MQX*( b10pM_MQX + b10gM_MQX + b10tM_MQX * ON_BDOT  + b10ss);
 B11s  =  ON_MQX*( b11pM_MQX + b11gM_MQX + b11tM_MQX * ON_BDOT  + b11ss);

 A2s   =  ON_MQX*( a2pM_MQX  + a2gM_MQX  + a2tM_MQX  * ON_BDOT  + a2ss );
 A3s   =  ON_MQX*( a3pM_MQX  + a3gM_MQX  + a3tM_MQX  * ON_BDOT  + a3ss );
 A4s   =  ON_MQX*( a4pM_MQX  + a4gM_MQX  + a4tM_MQX  * ON_BDOT  + a4ss );
 A5s   =  ON_MQX*( a5pM_MQX  + a5gM_MQX  + a5tM_MQX  * ON_BDOT  + a5ss );
 A6s   =  ON_MQX*( a6pM_MQX  + a6gM_MQX  + a6tM_MQX  * ON_BDOT  + a6ss );
 A7s   =  ON_MQX*( a7pM_MQX  + a7gM_MQX  + a7tM_MQX  * ON_BDOT  + a7ss );
 A8s   =  ON_MQX*( a8pM_MQX  + a8gM_MQX  + a8tM_MQX  * ON_BDOT  + a8ss );
 A9s   =  ON_MQX*( a9pM_MQX  + a9gM_MQX  + a9tM_MQX  * ON_BDOT  + a9ss );
 A10s  =  ON_MQX*( a10pM_MQX + a10gM_MQX + a10tM_MQX * ON_BDOT  + a10ss);
 A11s  =  ON_MQX*( a11pM_MQX + a11gM_MQX + a11tM_MQX * ON_BDOT  + a11ss);
}

!***********************Low-Beta Quadrupoles (MQXA)********************


NewFamily_MQXA: macro = {
 b2ss  = sqrt(b2pU_MQXA^2 + b2gU_MQXA^2 + (b2tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a2ss  = sqrt(a2pU_MQXA^2 + a2gU_MQXA^2 + (a2tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b3ss  = sqrt(b3pU_MQXA^2 + b3gU_MQXA^2 + (b3tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a3ss  = sqrt(a3pU_MQXA^2 + a3gU_MQXA^2 + (a3tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b4ss  = sqrt(b4pU_MQXA^2 + b4gU_MQXA^2 + (b4tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a4ss  = sqrt(a4pU_MQXA^2 + a4gU_MQXA^2 + (a4tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b5ss  = sqrt(b5pU_MQXA^2 + b5gU_MQXA^2 + (b5tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a5ss  = sqrt(a5pU_MQXA^2 + a5gU_MQXA^2 + (a5tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b6ss  = sqrt(b6pU_MQXA^2 + b6gU_MQXA^2 + (b6tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a6ss  = sqrt(a6pU_MQXA^2 + a6gU_MQXA^2 + (a6tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b7ss  = sqrt(b7pU_MQXA^2 + b7gU_MQXA^2 + (b7tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a7ss  = sqrt(a7pU_MQXA^2 + a7gU_MQXA^2 + (a7tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b8ss  = sqrt(b8pU_MQXA^2 + b8gU_MQXA^2 + (b8tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a8ss  = sqrt(a8pU_MQXA^2 + a8gU_MQXA^2 + (a8tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b9ss  = sqrt(b9pU_MQXA^2 + b9gU_MQXA^2 + (b9tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a9ss  = sqrt(a9pU_MQXA^2 + a9gU_MQXA^2 + (a9tU_MQXA * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b10ss = sqrt(b10pU_MQXA^2+ b10gU_MQXA^2+ (b10tU_MQXA* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a10ss = sqrt(a10pU_MQXA^2+ a10gU_MQXA^2+ (a10tU_MQXA* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b11ss = sqrt(b11pU_MQXA^2+ b11gU_MQXA^2+ (b11tU_MQXA* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a11ss = sqrt(a11pU_MQXA^2+ a11gU_MQXA^2+ (a11tU_MQXA* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
}

Single_MQXA: macro = {
 B2s   =  ON_MQX*( b2pM_MQXA  + b2gM_MQXA  + b2tM_MQXA  * ON_BDOT  + b2ss );
 B3s   =  ON_MQX*( b3pM_MQXA  + b3gM_MQXA  + b3tM_MQXA  * ON_BDOT  + b3ss );
 B4s   =  ON_MQX*( b4pM_MQXA  + b4gM_MQXA  + b4tM_MQXA  * ON_BDOT  + b4ss );
 B5s   =  ON_MQX*( b5pM_MQXA  + b5gM_MQXA  + b5tM_MQXA  * ON_BDOT  + b5ss );
 B6s   =  ON_MQX*( b6pM_MQXA  + b6gM_MQXA  + b6tM_MQXA  * ON_BDOT  + b6ss );
 B7s   =  ON_MQX*( b7pM_MQXA  + b7gM_MQXA  + b7tM_MQXA  * ON_BDOT  + b7ss );
 B8s   =  ON_MQX*( b8pM_MQXA  + b8gM_MQXA  + b8tM_MQXA  * ON_BDOT  + b8ss );
 B9s   =  ON_MQX*( b9pM_MQXA  + b9gM_MQXA  + b9tM_MQXA  * ON_BDOT  + b9ss );
 B10s  =  ON_MQX*( b10pM_MQXA + b10gM_MQXA + b10tM_MQXA * ON_BDOT  + b10ss);
 B11s  =  ON_MQX*( b11pM_MQXA + b11gM_MQXA + b11tM_MQXA * ON_BDOT  + b11ss);

 A2s   =  ON_MQX*( a2pM_MQXA  + a2gM_MQXA  + a2tM_MQXA  * ON_BDOT  + a2ss );
 A3s   =  ON_MQX*( a3pM_MQXA  + a3gM_MQXA  + a3tM_MQXA  * ON_BDOT  + a3ss );
 A4s   =  ON_MQX*( a4pM_MQXA  + a4gM_MQXA  + a4tM_MQXA  * ON_BDOT  + a4ss );
 A5s   =  ON_MQX*( a5pM_MQXA  + a5gM_MQXA  + a5tM_MQXA  * ON_BDOT  + a5ss );
 A6s   =  ON_MQX*( a6pM_MQXA  + a6gM_MQXA  + a6tM_MQXA  * ON_BDOT  + a6ss );
 A7s   =  ON_MQX*( a7pM_MQXA  + a7gM_MQXA  + a7tM_MQXA  * ON_BDOT  + a7ss );
 A8s   =  ON_MQX*( a8pM_MQXA  + a8gM_MQXA  + a8tM_MQXA  * ON_BDOT  + a8ss );
 A9s   =  ON_MQX*( a9pM_MQXA  + a9gM_MQXA  + a9tM_MQXA  * ON_BDOT  + a9ss );
 A10s  =  ON_MQX*( a10pM_MQXA + a10gM_MQXA + a10tM_MQXA * ON_BDOT  + a10ss);
 A11s  =  ON_MQX*( a11pM_MQXA + a11gM_MQXA + a11tM_MQXA * ON_BDOT  + a11ss);
}

!***********************Low-Beta Quadrupoles (MQXB)********************

NewFamily_MQXB: macro = {
 b2ss  = sqrt(b2pU_MQXB^2 + b2gU_MQXB^2 + (b2tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a2ss  = sqrt(a2pU_MQXB^2 + a2gU_MQXB^2 + (a2tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b3ss  = sqrt(b3pU_MQXB^2 + b3gU_MQXB^2 + (b3tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a3ss  = sqrt(a3pU_MQXB^2 + a3gU_MQXB^2 + (a3tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b4ss  = sqrt(b4pU_MQXB^2 + b4gU_MQXB^2 + (b4tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a4ss  = sqrt(a4pU_MQXB^2 + a4gU_MQXB^2 + (a4tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b5ss  = sqrt(b5pU_MQXB^2 + b5gU_MQXB^2 + (b5tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a5ss  = sqrt(a5pU_MQXB^2 + a5gU_MQXB^2 + (a5tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b6ss  = sqrt(b6pU_MQXB^2 + b6gU_MQXB^2 + (b6tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a6ss  = sqrt(a6pU_MQXB^2 + a6gU_MQXB^2 + (a6tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b7ss  = sqrt(b7pU_MQXB^2 + b7gU_MQXB^2 + (b7tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a7ss  = sqrt(a7pU_MQXB^2 + a7gU_MQXB^2 + (a7tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b8ss  = sqrt(b8pU_MQXB^2 + b8gU_MQXB^2 + (b8tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a8ss  = sqrt(a8pU_MQXB^2 + a8gU_MQXB^2 + (a8tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b9ss  = sqrt(b9pU_MQXB^2 + b9gU_MQXB^2 + (b9tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a9ss  = sqrt(a9pU_MQXB^2 + a9gU_MQXB^2 + (a9tU_MQXB * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b10ss = sqrt(b10pU_MQXB^2+ b10gU_MQXB^2+ (b10tU_MQXB* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a10ss = sqrt(a10pU_MQXB^2+ a10gU_MQXB^2+ (a10tU_MQXB* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b11ss = sqrt(b11pU_MQXB^2+ b11gU_MQXB^2+ (b11tU_MQXB* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a11ss = sqrt(a11pU_MQXB^2+ a11gU_MQXB^2+ (a11tU_MQXB* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
}

Single_MQXB: macro = {
 B2s   =  ON_MQX*( b2pM_MQXB  + b2gM_MQXB  + b2tM_MQXB  * ON_BDOT  + b2ss );
 B3s   =  ON_MQX*( b3pM_MQXB  + b3gM_MQXB  + b3tM_MQXB  * ON_BDOT  + b3ss );
 B4s   =  ON_MQX*( b4pM_MQXB  + b4gM_MQXB  + b4tM_MQXB  * ON_BDOT  + b4ss );
 B5s   =  ON_MQX*( b5pM_MQXB  + b5gM_MQXB  + b5tM_MQXB  * ON_BDOT  + b5ss );
 B6s   =  ON_MQX*( b6pM_MQXB  + b6gM_MQXB  + b6tM_MQXB  * ON_BDOT  + b6ss );
 B7s   =  ON_MQX*( b7pM_MQXB  + b7gM_MQXB  + b7tM_MQXB  * ON_BDOT  + b7ss );
 B8s   =  ON_MQX*( b8pM_MQXB  + b8gM_MQXB  + b8tM_MQXB  * ON_BDOT  + b8ss );
 B9s   =  ON_MQX*( b9pM_MQXB  + b9gM_MQXB  + b9tM_MQXB  * ON_BDOT  + b9ss );
 B10s  =  ON_MQX*( b10pM_MQXB + b10gM_MQXB + b10tM_MQXB * ON_BDOT  + b10ss);
 B11s  =  ON_MQX*( b11pM_MQXB + b11gM_MQXB + b11tM_MQXB * ON_BDOT  + b11ss);

 A2s   =  ON_MQX*( a2pM_MQXB  + a2gM_MQXB  + a2tM_MQXB  * ON_BDOT  + a2ss );
 A3s   =  ON_MQX*( a3pM_MQXB  + a3gM_MQXB  + a3tM_MQXB  * ON_BDOT  + a3ss );
 A4s   =  ON_MQX*( a4pM_MQXB  + a4gM_MQXB  + a4tM_MQXB  * ON_BDOT  + a4ss );
 A5s   =  ON_MQX*( a5pM_MQXB  + a5gM_MQXB  + a5tM_MQXB  * ON_BDOT  + a5ss );
 A6s   =  ON_MQX*( a6pM_MQXB  + a6gM_MQXB  + a6tM_MQXB  * ON_BDOT  + a6ss );
 A7s   =  ON_MQX*( a7pM_MQXB  + a7gM_MQXB  + a7tM_MQXB  * ON_BDOT  + a7ss );
 A8s   =  ON_MQX*( a8pM_MQXB  + a8gM_MQXB  + a8tM_MQXB  * ON_BDOT  + a8ss );
 A9s   =  ON_MQX*( a9pM_MQXB  + a9gM_MQXB  + a9tM_MQXB  * ON_BDOT  + a9ss );
 A10s  =  ON_MQX*( a10pM_MQXB + a10gM_MQXB + a10tM_MQXB * ON_BDOT  + a10ss);
 A11s  =  ON_MQX*( a11pM_MQXB + a11gM_MQXB + a11tM_MQXB * ON_BDOT  + a11ss);
}

!*******************Wide Aperture Quadrupoles(MQY)********************

NewFamily_MQY: macro = {
 b2ss  = sqrt(b2pU_MQX^2 + b2gU_MQX^2 + (b2tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a2ss  = sqrt(a2pU_MQX^2 + a2gU_MQX^2 + (a2tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b3ss  = sqrt(b3pU_MQX^2 + b3gU_MQX^2 + (b3tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a3ss  = sqrt(a3pU_MQX^2 + a3gU_MQX^2 + (a3tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b4ss  = sqrt(b4pU_MQX^2 + b4gU_MQX^2 + (b4tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a4ss  = sqrt(a4pU_MQX^2 + a4gU_MQX^2 + (a4tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b5ss  = sqrt(b5pU_MQX^2 + b5gU_MQX^2 + (b5tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a5ss  = sqrt(a5pU_MQX^2 + a5gU_MQX^2 + (a5tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b6ss  = sqrt(b6pU_MQX^2 + b6gU_MQX^2 + (b6tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a6ss  = sqrt(a6pU_MQX^2 + a6gU_MQX^2 + (a6tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b7ss  = sqrt(b7pU_MQX^2 + b7gU_MQX^2 + (b7tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a7ss  = sqrt(a7pU_MQX^2 + a7gU_MQX^2 + (a7tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b8ss  = sqrt(b8pU_MQX^2 + b8gU_MQX^2 + (b8tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a8ss  = sqrt(a8pU_MQX^2 + a8gU_MQX^2 + (a8tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b9ss  = sqrt(b9pU_MQX^2 + b9gU_MQX^2 + (b9tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a9ss  = sqrt(a9pU_MQX^2 + a9gU_MQX^2 + (a9tU_MQX * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b10ss = sqrt(b10pU_MQX^2+ b10gU_MQX^2+ (b10tU_MQX* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a10ss = sqrt(a10pU_MQX^2+ a10gU_MQX^2+ (a10tU_MQX* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b11ss = sqrt(b11pU_MQX^2+ b11gU_MQX^2+ (b11tU_MQX* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a11ss = sqrt(a11pU_MQX^2+ a11gU_MQX^2+ (a11tU_MQX* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
}

Outer_MQY: macro = {
 B2s   =  ON_MQY*( b2pM_MQX  + b2gM_MQX  + b2tM_MQX  * ON_BDOT  + b2ss );
 B3s   =  ON_MQY*( b3pM_MQX  + b3gM_MQX  + b3tM_MQX  * ON_BDOT  + b3ss );
 B4s   =  ON_MQY*( b4pM_MQX  + b4gM_MQX  + b4tM_MQX  * ON_BDOT  + b4ss );
 B5s   =  ON_MQY*( b5pM_MQX  + b5gM_MQX  + b5tM_MQX  * ON_BDOT  + b5ss );
 B6s   =  ON_MQY*( b6pM_MQX  + b6gM_MQX  + b6tM_MQX  * ON_BDOT  + b6ss );
 B7s   =  ON_MQY*( b7pM_MQX  + b7gM_MQX  + b7tM_MQX  * ON_BDOT  + b7ss );
 B8s   =  ON_MQY*( b8pM_MQX  + b8gM_MQX  + b8tM_MQX  * ON_BDOT  + b8ss );
 B9s   =  ON_MQY*( b9pM_MQX  + b9gM_MQX  + b9tM_MQX  * ON_BDOT  + b9ss );
 B10s  =  ON_MQY*( b10pM_MQX + b10gM_MQX + b10tM_MQX * ON_BDOT  + b10ss);
 B11s  =  ON_MQY*( b11pM_MQX + b11gM_MQX + b11tM_MQX * ON_BDOT  + b11ss);

 A2s   =  ON_MQY*( a2pM_MQX  + a2gM_MQX  + a2tM_MQX  * ON_BDOT  + a2ss );
 A3s   =  ON_MQY*( a3pM_MQX  + a3gM_MQX  + a3tM_MQX  * ON_BDOT  + a3ss );
 A4s   =  ON_MQY*( a4pM_MQX  + a4gM_MQX  + a4tM_MQX  * ON_BDOT  + a4ss );
 A5s   =  ON_MQY*( a5pM_MQX  + a5gM_MQX  + a5tM_MQX  * ON_BDOT  + a5ss );
 A6s   =  ON_MQY*( a6pM_MQX  + a6gM_MQX  + a6tM_MQX  * ON_BDOT  + a6ss );
 A7s   =  ON_MQY*( a7pM_MQX  + a7gM_MQX  + a7tM_MQX  * ON_BDOT  + a7ss );
 A8s   =  ON_MQY*( a8pM_MQX  + a8gM_MQX  + a8tM_MQX  * ON_BDOT  + a8ss );
 A9s   =  ON_MQY*( a9pM_MQX  + a9gM_MQX  + a9tM_MQX  * ON_BDOT  + a9ss );
 A10s  =  ON_MQY*( a10pM_MQX + a10gM_MQX + a10tM_MQX * ON_BDOT  + a10ss);
 A11s  =  ON_MQY*( a11pM_MQX + a11gM_MQX + a11tM_MQX * ON_BDOT  + a11ss);
}

Inner_MQY: macro = {
 B2s   =  ON_MQY*( b2pM_MQX  + b2gM_MQX  + b2tM_MQX  * ON_BDOT  + b2ss );
 B3s   =  ON_MQY*( b3pM_MQX  - b3gM_MQX  + b3tM_MQX  * ON_BDOT  + b3ss );
 B4s   =  ON_MQY*( b4pM_MQX  + b4gM_MQX  + b4tM_MQX  * ON_BDOT  + b4ss );
 B5s   =  ON_MQY*( b5pM_MQX  - b5gM_MQX  + b5tM_MQX  * ON_BDOT  + b5ss );
 B6s   =  ON_MQY*( b6pM_MQX  + b6gM_MQX  + b6tM_MQX  * ON_BDOT  + b6ss );
 B7s   =  ON_MQY*( b7pM_MQX  - b7gM_MQX  + b7tM_MQX  * ON_BDOT  + b7ss );
 B8s   =  ON_MQY*( b8pM_MQX  + b8gM_MQX  + b8tM_MQX  * ON_BDOT  + b8ss );
 B9s   =  ON_MQY*( b9pM_MQX  - b9gM_MQX  + b9tM_MQX  * ON_BDOT  + b9ss );
 B10s  =  ON_MQY*( b10pM_MQX + b10gM_MQX + b10tM_MQX * ON_BDOT  + b10ss);
 B11s  =  ON_MQY*( b11pM_MQX - b11gM_MQX + b11tM_MQX * ON_BDOT  + b11ss);

 A2s   =  ON_MQY*( a2pM_MQX  - a2gM_MQX  + a2tM_MQX  * ON_BDOT  + a2ss );
 A3s   =  ON_MQY*( a3pM_MQX  + a3gM_MQX  + a3tM_MQX  * ON_BDOT  + a3ss );
 A4s   =  ON_MQY*( a4pM_MQX  - a4gM_MQX  + a4tM_MQX  * ON_BDOT  + a4ss );
 A5s   =  ON_MQY*( a5pM_MQX  + a5gM_MQX  + a5tM_MQX  * ON_BDOT  + a5ss );
 A6s   =  ON_MQY*( a6pM_MQX  - a6gM_MQX  + a6tM_MQX  * ON_BDOT  + a6ss );
 A7s   =  ON_MQY*( a7pM_MQX  + a7gM_MQX  + a7tM_MQX  * ON_BDOT  + a7ss );
 A8s   =  ON_MQY*( a8pM_MQX  - a8gM_MQX  + a8tM_MQX  * ON_BDOT  + a8ss );
 A9s   =  ON_MQY*( a9pM_MQX  + a9gM_MQX  + a9tM_MQX  * ON_BDOT  + a9ss );
 A10s  =  ON_MQY*( a10pM_MQX - a10gM_MQX + a10tM_MQX * ON_BDOT  + a10ss);
 A11s  =  ON_MQY*( a11pM_MQX + a11gM_MQX + a11tM_MQX * ON_BDOT  + a11ss);
}

!************************Warm Quadrupoles (MQW)***********************

NewFamily_MQW: macro = {
 b2ss  = sqrt(b2pU_MQW^2 + b2gU_MQW^2 + (b2tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a2ss  = sqrt(a2pU_MQW^2 + a2gU_MQW^2 + (a2tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b3ss  = sqrt(b3pU_MQW^2 + b3gU_MQW^2 + (b3tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a3ss  = sqrt(a3pU_MQW^2 + a3gU_MQW^2 + (a3tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b4ss  = sqrt(b4pU_MQW^2 + b4gU_MQW^2 + (b4tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a4ss  = sqrt(a4pU_MQW^2 + a4gU_MQW^2 + (a4tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b5ss  = sqrt(b5pU_MQW^2 + b5gU_MQW^2 + (b5tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a5ss  = sqrt(a5pU_MQW^2 + a5gU_MQW^2 + (a5tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b6ss  = sqrt(b6pU_MQW^2 + b6gU_MQW^2 + (b6tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a6ss  = sqrt(a6pU_MQW^2 + a6gU_MQW^2 + (a6tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b7ss  = sqrt(b7pU_MQW^2 + b7gU_MQW^2 + (b7tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a7ss  = sqrt(a7pU_MQW^2 + a7gU_MQW^2 + (a7tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b8ss  = sqrt(b8pU_MQW^2 + b8gU_MQW^2 + (b8tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a8ss  = sqrt(a8pU_MQW^2 + a8gU_MQW^2 + (a8tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b9ss  = sqrt(b9pU_MQW^2 + b9gU_MQW^2 + (b9tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a9ss  = sqrt(a9pU_MQW^2 + a9gU_MQW^2 + (a9tU_MQW * ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b10ss = sqrt(b10pU_MQW^2+ b10gU_MQW^2+ (b10tU_MQW* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a10ss = sqrt(a10pU_MQW^2+ a10gU_MQW^2+ (a10tU_MQW* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 b11ss = sqrt(b11pU_MQW^2+ b11gU_MQW^2+ (b11tU_MQW* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
 a11ss = sqrt(a11pU_MQW^2+ a11gU_MQW^2+ (a11tU_MQW* ON_BDOT)^2) 
                             /GCUTS*TGAUSS(GCUTS);
}

Outer_MQW: macro = {
 B2s   =  ON_MQW*( b2pM_MQW  + b2gM_MQW  + b2tM_MQW  * ON_BDOT  + b2ss );
 B3s   =  ON_MQW*( b3pM_MQW  + b3gM_MQW  + b3tM_MQW  * ON_BDOT  + b3ss );
 B4s   =  ON_MQW*( b4pM_MQW  + b4gM_MQW  + b4tM_MQW  * ON_BDOT  + b4ss );
 B5s   =  ON_MQW*( b5pM_MQW  + b5gM_MQW  + b5tM_MQW  * ON_BDOT  + b5ss );
 B6s   =  ON_MQW*( b6pM_MQW  + b6gM_MQW  + b6tM_MQW  * ON_BDOT  + b6ss );
 B7s   =  ON_MQW*( b7pM_MQW  + b7gM_MQW  + b7tM_MQW  * ON_BDOT  + b7ss );
 B8s   =  ON_MQW*( b8pM_MQW  + b8gM_MQW  + b8tM_MQW  * ON_BDOT  + b8ss );
 B9s   =  ON_MQW*( b9pM_MQW  + b9gM_MQW  + b9tM_MQW  * ON_BDOT  + b9ss );
 B10s  =  ON_MQW*( b10pM_MQW + b10gM_MQW + b10tM_MQW * ON_BDOT  + b10ss);
 B11s  =  ON_MQW*( b11pM_MQW + b11gM_MQW + b11tM_MQW * ON_BDOT  + b11ss);

 A2s   =  ON_MQW*( a2pM_MQW  + a2gM_MQW  + a2tM_MQW  * ON_BDOT  + a2ss );
 A3s   =  ON_MQW*( a3pM_MQW  + a3gM_MQW  + a3tM_MQW  * ON_BDOT  + a3ss );
 A4s   =  ON_MQW*( a4pM_MQW  + a4gM_MQW  + a4tM_MQW  * ON_BDOT  + a4ss );
 A5s   =  ON_MQW*( a5pM_MQW  + a5gM_MQW  + a5tM_MQW  * ON_BDOT  + a5ss );
 A6s   =  ON_MQW*( a6pM_MQW  + a6gM_MQW  + a6tM_MQW  * ON_BDOT  + a6ss );
 A7s   =  ON_MQW*( a7pM_MQW  + a7gM_MQW  + a7tM_MQW  * ON_BDOT  + a7ss );
 A8s   =  ON_MQW*( a8pM_MQW  + a8gM_MQW  + a8tM_MQW  * ON_BDOT  + a8ss );
 A9s   =  ON_MQW*( a9pM_MQW  + a9gM_MQW  + a9tM_MQW  * ON_BDOT  + a9ss );
 A10s  =  ON_MQW*( a10pM_MQW + a10gM_MQW + a10tM_MQW * ON_BDOT  + a10ss);
 A11s  =  ON_MQW*( a11pM_MQW + a11gM_MQW + a11tM_MQW * ON_BDOT  + a11ss);
}

Inner_MQW: macro = {
 B2s   =  ON_MQW*( b2pM_MQW  + b2gM_MQW  + b2tM_MQW  * ON_BDOT  + b2ss );
 B3s   =  ON_MQW*( b3pM_MQW  - b3gM_MQW  + b3tM_MQW  * ON_BDOT  + b3ss );
 B4s   =  ON_MQW*( b4pM_MQW  + b4gM_MQW  + b4tM_MQW  * ON_BDOT  + b4ss );
 B5s   =  ON_MQW*( b5pM_MQW  - b5gM_MQW  + b5tM_MQW  * ON_BDOT  + b5ss );
 B6s   =  ON_MQW*( b6pM_MQW  + b6gM_MQW  + b6tM_MQW  * ON_BDOT  + b6ss );
 B7s   =  ON_MQW*( b7pM_MQW  - b7gM_MQW  + b7tM_MQW  * ON_BDOT  + b7ss );
 B8s   =  ON_MQW*( b8pM_MQW  + b8gM_MQW  + b8tM_MQW  * ON_BDOT  + b8ss );
 B9s   =  ON_MQW*( b9pM_MQW  - b9gM_MQW  + b9tM_MQW  * ON_BDOT  + b9ss );
 B10s  =  ON_MQW*( b10pM_MQW + b10gM_MQW + b10tM_MQW * ON_BDOT  + b10ss);
 B11s  =  ON_MQW*( b11pM_MQW - b11gM_MQW + b11tM_MQW * ON_BDOT  + b11ss);

 A2s   =  ON_MQW*( a2pM_MQW  - a2gM_MQW  + a2tM_MQW  * ON_BDOT  + a2ss );
 A3s   =  ON_MQW*( a3pM_MQW  + a3gM_MQW  + a3tM_MQW  * ON_BDOT  + a3ss );
 A4s   =  ON_MQW*( a4pM_MQW  - a4gM_MQW  + a4tM_MQW  * ON_BDOT  + a4ss );
 A5s   =  ON_MQW*( a5pM_MQW  + a5gM_MQW  + a5tM_MQW  * ON_BDOT  + a5ss );
 A6s   =  ON_MQW*( a6pM_MQW  - a6gM_MQW  + a6tM_MQW  * ON_BDOT  + a6ss );
 A7s   =  ON_MQW*( a7pM_MQW  + a7gM_MQW  + a7tM_MQW  * ON_BDOT  + a7ss );
 A8s   =  ON_MQW*( a8pM_MQW  - a8gM_MQW  + a8tM_MQW  * ON_BDOT  + a8ss );
 A9s   =  ON_MQW*( a9pM_MQW  + a9gM_MQW  + a9tM_MQW  * ON_BDOT  + a9ss );
 A10s  =  ON_MQW*( a10pM_MQW - a10gM_MQW + a10tM_MQW * ON_BDOT  + a10ss);
 A11s  =  ON_MQW*( a11pM_MQW + a11gM_MQW + a11tM_MQW * ON_BDOT  + a11ss);
}

Return;
